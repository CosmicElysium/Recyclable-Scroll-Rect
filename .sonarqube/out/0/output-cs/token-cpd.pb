¤
`D:\GitHub-Projects\Recyclable-Scroll-Rect\Assets\Recyclable Scroll Rect\Demo\Scripts\DemoCell.cs
public		 
class		 
DemoCell		 
:		 
MonoBehaviour		 %
,		% &
ICell		' ,
{

 
public 

Text 
	nameLabel 
; 
public 

Text 
genderLabel 
; 
public 

Text 
idLabel 
; 
private 
ContactInfo 
_contactInfo $
;$ %
private 
int 

_cellIndex 
; 
private 
void 
Start 
( 
) 
{ 
GetComponent 
< 
Button 
> 
( 
) 
. 
onClick &
.& '
AddListener' 2
(2 3
ButtonListener3 A
)A B
;B C
} 
public 

void 
ConfigureCell 
( 
ContactInfo )
contactInfo* 5
,5 6
int6 9
	cellIndex: C
)C D
{ 

_cellIndex 
= 
	cellIndex 
; 
_contactInfo 
= 
contactInfo "
;" #
	nameLabel   
.   
text   
=   
contactInfo   $
.  $ %
Name  % )
;  ) *
genderLabel!! 
.!! 
text!! 
=!! 
contactInfo!! &
.!!& '
Gender!!' -
;!!- .
idLabel"" 
."" 
text"" 
="" 
contactInfo"" "
.""" #
id""# %
;""% &
}## 
private&& 
void&& 
ButtonListener&& 
(&&  
)&&  !
{'' 
Debug(( 
.(( 
Log(( 
((( 
$str(( 
+(( 

_cellIndex(( )
+((* +
$str((- 8
+((9 :
_contactInfo((; G
.((G H
Name((H L
+((N O
$str((P ]
+((^ _
_contactInfo((` l
.((l m
Gender((m s
)((s t
;((t u
})) 
}** Ò
nD:\GitHub-Projects\Recyclable-Scroll-Rect\Assets\Recyclable Scroll Rect\Demo\Scripts\RecyclableScrollerDemo.cs
public 
struct 
ContactInfo 
{ 
public 

string 
Name 
; 
public 

string 
Gender 
; 
public 

string 
id 
; 
} 
public 
class "
RecyclableScrollerDemo #
:$ %
MonoBehaviour& 3
,3 4+
IRecyclableScrollRectDataSource5 T
{ 
[ 
SerializeField 
]  
RecyclableScrollRect !
_recyclableScrollRect .
;. /
[ 
SerializeField 
] 
private 
int 
_dataLength 
; 
private 
List 
< 
ContactInfo 
> 
_contactList *
=+ ,
new- 0
List1 5
<5 6
ContactInfo6 A
>A B
(B C
)C D
;D E
private 
void 
Awake 
( 
) 
{   
InitData!! 
(!! 
)!! 
;!! !
_recyclableScrollRect"" 
."" 

DataSource"" (
="") *
this""+ /
;""/ 0
}## 
private&& 
void&& 
InitData&& 
(&& 
)&& 
{'' 
if(( 

((( 
_contactList(( 
!=(( 
null((  
)((  !
_contactList((" .
.((. /
Clear((/ 4
(((4 5
)((5 6
;((6 7
string** 
[** 
]** 
genders** 
=** 
{** 
$str** #
,**# $
$str**% -
}**. /
;**/ 0
for++ 
(++ 
int++ 
i++ 
=++ 
$num++ 
;++ 
i++ 
<++ 
_dataLength++ '
;++' (
i++) *
++++* ,
)++, -
{,, 	
ContactInfo-- 
obj-- 
=-- 
new-- !
ContactInfo--" -
(--- .
)--. /
;--/ 0
obj.. 
... 
Name.. 
=.. 
i.. 
+.. 
$str.. "
;.." #
obj// 
.// 
Gender// 
=// 
genders//  
[//  !
Random//! '
.//' (
Range//( -
(//- .
$num//. /
,/// 0
$num//1 2
)//2 3
]//3 4
;//4 5
obj00 
.00 
id00 
=00 
$str00 
+00  
i00! "
;00" #
_contactList11 
.11 
Add11 
(11 
obj11  
)11  !
;11! "
}22 	
}33 
public:: 

int:: 
GetItemCount:: 
(:: 
):: 
{;; 
return<< 
_contactList<< 
.<< 
Count<< !
;<<! "
}== 
publicCC 

voidCC 
SetCellCC 
(CC 
ICellCC 
cellCC "
,CC" #
intCC$ '
indexCC( -
)CC- .
{DD 
varFF 
itemFF 
=FF 
cellFF 
asFF 
DemoCellFF #
;FF# $
itemGG 
.GG 
ConfigureCellGG 
(GG 
_contactListGG '
[GG' (
indexGG( -
]GG- .
,GG. /
indexGG/ 4
)GG4 5
;GG5 6
}HH 
}KK ¶V
rD:\GitHub-Projects\Recyclable-Scroll-Rect\Assets\Recyclable Scroll Rect\Main\Editors\RecyclableScrollRectEditor.cs
	namespace 	
PolyAndCode
 
. 
UI 
{ 
[ 
CustomEditor 
( 
typeof 
(  
RecyclableScrollRect -
)- .
,. /
true0 4
)4 5
]5 6
[ "
CanEditMultipleObjects 
] 
public 

class &
RecyclableScrollRectEditor +
:, -
Editor. 4
{ 
SerializedProperty 
	m_Content $
;$ %
SerializedProperty 
m_MovementType )
;) *
SerializedProperty 
m_Elasticity '
;' (
SerializedProperty 
	m_Inertia $
;$ %
SerializedProperty 
m_DecelerationRate -
;- .
SerializedProperty 
m_ScrollSensitivity .
;. /
SerializedProperty 

m_Viewport %
;% &
SerializedProperty 
m_OnValueChanged +
;+ ,
SerializedProperty 
_protoTypeCell )
;) *
SerializedProperty 
_selfInitialize *
;* +
SerializedProperty 

_direction %
;% &
SerializedProperty 
_type  
;  !
SerializedProperty 
	_segments $
;$ %
AnimBool 
m_ShowElasticity !
;! "
AnimBool   "
m_ShowDecelerationRate   '
;  ' ( 
RecyclableScrollRect"" 
_script"" $
;""$ %
	protected## 
virtual## 
void## 
OnEnable## '
(##' (
)##( )
{$$ 	
_script%% 
=%% 
(%%  
RecyclableScrollRect%% +
)%%+ ,
target%%, 2
;%%2 3
	m_Content'' 
='' 
serializedObject'' (
.''( )
FindProperty'') 5
(''5 6
$str''6 A
)''A B
;''B C
m_MovementType(( 
=(( 
serializedObject(( -
.((- .
FindProperty((. :
(((: ;
$str((; K
)((K L
;((L M
m_Elasticity)) 
=)) 
serializedObject)) +
.))+ ,
FindProperty)), 8
())8 9
$str))9 G
)))G H
;))H I
	m_Inertia** 
=** 
serializedObject** (
.**( )
FindProperty**) 5
(**5 6
$str**6 A
)**A B
;**B C
m_DecelerationRate++ 
=++  
serializedObject++! 1
.++1 2
FindProperty++2 >
(++> ?
$str++? S
)++S T
;++T U
m_ScrollSensitivity,, 
=,,  !
serializedObject,," 2
.,,2 3
FindProperty,,3 ?
(,,? @
$str,,@ U
),,U V
;,,V W

m_Viewport-- 
=-- 
serializedObject-- )
.--) *
FindProperty--* 6
(--6 7
$str--7 C
)--C D
;--D E
m_OnValueChanged.. 
=.. 
serializedObject.. /
.../ 0
FindProperty..0 <
(..< =
$str..= O
)..O P
;..P Q
_protoTypeCell11 
=11 
serializedObject11 -
.11- .
FindProperty11. :
(11: ;
$str11; J
)11J K
;11K L
_selfInitialize22 
=22 
serializedObject22 .
.22. /
FindProperty22/ ;
(22; <
$str22< L
)22L M
;22M N

_direction33 
=33 
serializedObject33 )
.33) *
FindProperty33* 6
(336 7
$str337 B
)33B C
;33C D
_type44 
=44 
serializedObject44 $
.44$ %
FindProperty44% 1
(441 2
$str442 8
)448 9
;449 :
	_segments55 
=55 
serializedObject55 (
.55( )
FindProperty55) 5
(555 6
$str556 A
)55A B
;55B C
m_ShowElasticity77 
=77 
new77 "
AnimBool77# +
(77+ ,
Repaint77, 3
)773 4
;774 5"
m_ShowDecelerationRate88 "
=88# $
new88% (
AnimBool88) 1
(881 2
Repaint882 9
)889 :
;88: ;
SetAnimBools99 
(99 
true99 
)99 
;99 
}:: 	
	protected<< 
virtual<< 
void<< 
	OnDisable<< (
(<<( )
)<<) *
{== 	
m_ShowElasticity>> 
.>> 
valueChanged>> )
.>>) *
RemoveListener>>* 8
(>>8 9
Repaint>>9 @
)>>@ A
;>>A B"
m_ShowDecelerationRate?? "
.??" #
valueChanged??# /
.??/ 0
RemoveListener??0 >
(??> ?
Repaint??? F
)??F G
;??G H
}@@ 	
voidBB 
SetAnimBoolsBB 
(BB 
boolBB 
instantBB &
)BB& '
{CC 	
SetAnimBoolDD 
(DD 
m_ShowElasticityDD (
,DD( )
!DD* +
m_MovementTypeDD+ 9
.DD9 :&
hasMultipleDifferentValuesDD: T
&&DDU W
m_MovementTypeDDX f
.DDf g
enumValueIndexDDg u
==DDv x
(DDy z
intDDz }
)DD} ~

ScrollRect	DD~ 
.
DD 
MovementType
DD 
.
DD 
Elastic
DD 
,
DD 
instant
DD ¦
)
DD¦ §
;
DD§ ¨
SetAnimBoolEE 
(EE "
m_ShowDecelerationRateEE .
,EE. /
!EE0 1
	m_InertiaEE1 :
.EE: ;&
hasMultipleDifferentValuesEE; U
&&EEV X
	m_InertiaEEY b
.EEb c
	boolValueEEc l
,EEl m
instantEEn u
)EEu v
;EEv w
}FF 	
voidHH 
SetAnimBoolHH 
(HH 
AnimBoolHH !
aHH" #
,HH# $
boolHH% )
valueHH* /
,HH/ 0
boolHH1 5
instantHH6 =
)HH= >
{II 	
ifJJ 
(JJ 
instantJJ 
)JJ 
aKK 
.KK 
valueKK 
=KK 
valueKK 
;KK  
elseLL 
aMM 
.MM 
targetMM 
=MM 
valueMM  
;MM  !
}NN 	
publicPP 
overridePP 
voidPP 
OnInspectorGUIPP +
(PP+ ,
)PP, -
{QQ 	
SetAnimBoolsRR 
(RR 
falseRR 
)RR 
;RR  
serializedObjectSS 
.SS 
UpdateSS #
(SS# $
)SS$ %
;SS% &
EditorGUILayoutUU 
.UU 
PropertyFieldUU )
(UU) *

_directionUU* 4
)UU4 5
;UU5 6
EditorGUILayoutVV 
.VV 
PropertyFieldVV )
(VV) *
_typeVV* /
)VV/ 0
;VV0 1
ifWW 
(WW 
_typeWW 
.WW 
	boolValueWW 
)WW  
{XX 
stringYY 
titleYY 
=YY 

_directionYY )
.YY) *
enumValueIndexYY* 8
==YY9 ;
(YY< =
intYY= @
)YY@ A 
RecyclableScrollRectYYA U
.YYU V
DirectionTypeYYV c
.YYc d
VerticalYYd l
?YYm n
$strYYo y
:YYz {
$str	YY| 
;
YY 
_scriptZZ 
.ZZ 
SegmentsZZ 
=ZZ  !
EditorGUILayoutZZ# 2
.ZZ2 3
IntFieldZZ3 ;
(ZZ; <
titleZZ< A
,ZZA B
_scriptZZC J
.ZZJ K
SegmentsZZK S
)ZZS T
;ZZT U
}[[ 
EditorGUILayout]] 
.]] 
PropertyField]] )
(]]) *
_selfInitialize]]* 9
)]]9 :
;]]: ;
EditorGUILayout^^ 
.^^ 
PropertyField^^ )
(^^) *

m_Viewport^^* 4
)^^4 5
;^^5 6
EditorGUILayout__ 
.__ 
PropertyField__ )
(__) *
	m_Content__* 3
)__3 4
;__4 5
EditorGUILayout`` 
.`` 
PropertyField`` )
(``) *
_protoTypeCell``* 8
)``8 9
;``9 :
EditorGUILayoutaa 
.aa 
Spaceaa !
(aa! "
)aa" #
;aa# $
EditorGUILayoutcc 
.cc 
PropertyFieldcc )
(cc) *
m_MovementTypecc* 8
)cc8 9
;cc9 :
ifdd 
(dd 
EditorGUILayoutdd 
.dd  
BeginFadeGroupdd  .
(dd. /
m_ShowElasticitydd/ ?
.dd? @
fadeddd@ E
)ddE F
)ddF G
{ee 
	EditorGUIff 
.ff 
indentLevelff %
++ff% '
;ff' (
EditorGUILayoutgg 
.gg  
PropertyFieldgg  -
(gg- .
m_Elasticitygg. :
)gg: ;
;gg; <
	EditorGUIhh 
.hh 
indentLevelhh %
--hh% '
;hh' (
}ii 
EditorGUILayoutjj 
.jj 
EndFadeGroupjj (
(jj( )
)jj) *
;jj* +
EditorGUILayoutll 
.ll 
PropertyFieldll )
(ll) *
	m_Inertiall* 3
)ll3 4
;ll4 5
ifmm 
(mm 
EditorGUILayoutmm 
.mm  
BeginFadeGroupmm  .
(mm. /"
m_ShowDecelerationRatemm/ E
.mmE F
fadedmmF K
)mmK L
)mmL M
{nn 
	EditorGUIoo 
.oo 
indentLeveloo %
++oo% '
;oo' (
EditorGUILayoutpp 
.pp  
PropertyFieldpp  -
(pp- .
m_DecelerationRatepp. @
)pp@ A
;ppA B
	EditorGUIqq 
.qq 
indentLevelqq %
--qq% '
;qq' (
}rr 
EditorGUILayoutss 
.ss 
EndFadeGroupss (
(ss( )
)ss) *
;ss* +
EditorGUILayoutuu 
.uu 
PropertyFielduu )
(uu) *
m_ScrollSensitivityuu* =
)uu= >
;uu> ?
EditorGUILayoutww 
.ww 
Spaceww !
(ww! "
)ww" #
;ww# $
EditorGUILayoutyy 
.yy 
PropertyFieldyy )
(yy) *
m_OnValueChangedyy* :
)yy: ;
;yy; <
serializedObject{{ 
.{{ #
ApplyModifiedProperties{{ 4
({{4 5
){{5 6
;{{6 7
}|| 	
}}} 
}~~ 
vD:\GitHub-Projects\Recyclable-Scroll-Rect\Assets\Recyclable Scroll Rect\Main\Editors\RecyclableScrollViewEditorTool.cs
	namespace 	
PolyAndCode
 
. 
UI 
{ 
[ 
ExecuteInEditMode 
] 
public 

static 
class *
RecyclableScrollViewEditorTool 6
{ 
const		 
string		 

PrefabPath		 
=		  !
$str		" k
;		k l
[ 	
MenuItem	 
( 
$str 8
)8 9
]9 :
private 
static 
void &
createRecyclableScrollView 6
(6 7
)7 8
{ 	

GameObject 
selected 
=  !
	Selection" +
.+ ,
activeGameObject, <
;< =
if 
( 
! 
selected 
|| 
! 
( 
selected '
.' (
	transform( 1
is2 4
RectTransform5 B
)B C
)C D
{ 
selected 
= 

GameObject %
.% &
FindObjectOfType& 6
<6 7
Canvas7 =
>= >
(> ?
)? @
.@ A

gameObjectA K
;K L
} 
if 
( 
! 
selected 
) 
return !
;! "

GameObject 
asset 
= 
AssetDatabase ,
., -
LoadAssetAtPath- <
(< =

PrefabPath= G
,G H
typeofI O
(O P

GameObjectP Z
)Z [
)[ \
as] _

GameObject` j
;j k

GameObject 
item 
= 
Object $
.$ %
Instantiate% 0
(0 1
asset1 6
)6 7
;7 8
item 
. 
name 
= 
$str 0
;0 1
item 
. 
	transform 
. 
	SetParent $
($ %
selected% -
.- .
	transform. 7
)7 8
;8 9
item 
. 
	transform 
. 
localPosition (
=) *
Vector3+ 2
.2 3
zero3 7
;7 8
	Selection 
. 
activeGameObject &
=' (
item) -
;- .
Undo   
.   %
RegisterCreatedObjectUndo   *
(  * +
item  + /
,  / 0
$str  1 Q
)  Q R
;  R S
}!! 	
}"" 
}## ÿ
qD:\GitHub-Projects\Recyclable-Scroll-Rect\Assets\Recyclable Scroll Rect\Main\Scripts\HorizontalRecyclingSystem.cs
	namespace 	
PolyAndCode
 
. 
UI 
{ 
public 

class %
HorizontalRecyclingSystem *
:+ ,
RecyclingSystem- <
{		 
private

 
readonly

 +
IRecyclableScrollRectDataSource

 8
_dataSource

9 D
;

D E
private 
readonly 
int 
_rows "
;" #
private 
float 

_cellWidth  
,  !
_cellHeight" -
;- .
private 
int 
_leftMostCellRow $
,$ %
_RightMostCellRow& 7
;7 8
private 
List 
< 
RectTransform "
>" #
	_cellPool$ -
;- .
private 
List 
< 
ICell 
> 
_cachedCells (
;( )
private 
Bounds !
_recyclableViewBounds ,
;, -
private 
readonly 
Vector3  
[  !
]! "
_corners# +
=, -
new. 1
Vector32 9
[9 :
$num: ;
]; <
;< =
private 
bool 

_recycling 
;  
private 
int 
leftMostCellIndex %
,% &
rightMostCellIndex' 9
;9 :
private 
int 
currentItemCount $
;$ %
public   %
HorizontalRecyclingSystem   (
(  ( )
RectTransform  ) 6
prototypeCell  7 D
,  D E
RectTransform  F S
viewport  T \
,  \ ]
RectTransform  ^ k
content  l s
,  s t,
IRecyclableScrollRectDataSource	  u 

dataSource
   
,
    
bool
  ¡ ¥
isGrid
  ¦ ¬
,
  ¬ ­
int
  ® ±
rows
  ² ¶
)
  ¶ ·
{!! 	
PrototypeCell## 
=## 
prototypeCell## )
;##) *
Viewport$$ 
=$$ 
viewport$$ 
;$$  
Content%% 
=%% 
content%% 
;%% 
_dataSource&& 
=&& 

dataSource&& $
;&&$ %
IsGrid'' 
='' 
isGrid'' 
;'' 
_rows(( 
=(( 
isGrid(( 
?(( 
rows(( !
:((" #
$num(($ %
;((% &
})) 	
public++ 
override++ 
IEnumerator++ #
InitCoroutine++$ 1
(++1 2
Action++2 8
onInitialized++9 F
)++F G
{,, 	
	SetAnchor.. 
(.. 
Content.. 
).. 
;.. 
Content// 
.// 
anchoredPosition// $
=//% &
Vector3//' .
.//. /
zero/// 3
;//3 4
yield00 
return00 
null00 
;00 
SetRecyclingBounds11 
(11 
)11  
;11  !
CreateCellPool44 
(44 
)44 
;44 
leftMostCellIndex55 
=55 
$num55  !
;55! "
rightMostCellIndex66 
=66  
	_cellPool66! *
.66* +
Count66+ 0
-661 2
$num663 4
;664 5
yield77 
return77 
null77 
;77 
int88 
coloums88 
=88 
Mathf88 
.88  
	CeilToInt88  )
(88) *
(88* +
float88+ 0
)880 1
	_cellPool881 :
.88: ;
Count88; @
/88A B
_rows88C H
)88H I
;88I J
	SetAnchor99 
(99 
Content99 
)99 
;99 
float:: 
contentXSize:: 
=::  
coloums::! (
*::) *
PrototypeCell::+ 8
.::8 9
	sizeDelta::9 B
.::B C
x::C D
;::D E
Content;; 
.;; 
	sizeDelta;; 
=;; 
new;;  #
Vector2;;$ +
(;;+ ,
contentXSize;;, 8
,;;8 9
Content;;: A
.;;A B
	sizeDelta;;B K
.;;K L
y;;L M
);;M N
;;;N O
currentItemCount<< 
=<< 
	_cellPool<< (
.<<( )
Count<<) .
;<<. /
onInitialized== 
(== 
)== 
;== 
}>> 	
privateDD 
voidDD 
SetRecyclingBoundsDD '
(DD' (
)DD( )
{EE 	
ViewportFF 
.FF 
GetWorldCornersFF $
(FF$ %
_cornersFF% -
)FF- .
;FF. /
floatGG 

threshHoldGG 
=GG 
RecyclingThresholdGG 1
*GG2 3
(GG4 5
_cornersGG5 =
[GG= >
$numGG> ?
]GG? @
.GG@ A
xGGA B
-GGC D
_cornersGGE M
[GGM N
$numGGN O
]GGO P
.GGP Q
xGGQ R
)GGR S
;GGS T!
_recyclableViewBoundsHH !
.HH! "
minHH" %
=HH& '
newHH( +
Vector3HH, 3
(HH3 4
_cornersHH4 <
[HH< =
$numHH= >
]HH> ?
.HH? @
xHH@ A
-HHB C

threshHoldHHD N
,HHN O
_cornersHHP X
[HHX Y
$numHHY Z
]HHZ [
.HH[ \
yHH\ ]
)HH] ^
;HH^ _!
_recyclableViewBoundsII !
.II! "
maxII" %
=II& '
newII( +
Vector3II, 3
(II3 4
_cornersII4 <
[II< =
$numII= >
]II> ?
.II? @
xII@ A
+IIB C

threshHoldIID N
,IIN O
_cornersIIP X
[IIX Y
$numIIY Z
]IIZ [
.II[ \
yII\ ]
)II] ^
;II^ _
}JJ 	
privateOO 
voidOO 
CreateCellPoolOO #
(OO# $
)OO$ %
{PP 	
ifRR 
(RR 
	_cellPoolRR 
!=RR 
nullRR !
)RR! "
{SS 
	_cellPoolTT 
.TT 
ForEachTT !
(TT! "
(TT" #
RectTransformTT# 0
itemTT1 5
)TT5 6
=>TT7 9
UnityEngineTT: E
.TTE F
ObjectTTF L
.TTL M
DestroyTTM T
(TTT U
itemTTU Y
.TTY Z

gameObjectTTZ d
)TTd e
)TTe f
;TTf g
	_cellPoolUU 
.UU 
ClearUU 
(UU  
)UU  !
;UU! "
_cachedCellsVV 
.VV 
ClearVV "
(VV" #
)VV# $
;VV$ %
}WW 
elseXX 
{YY 
_cachedCellsZZ 
=ZZ 
newZZ "
ListZZ# '
<ZZ' (
ICellZZ( -
>ZZ- .
(ZZ. /
)ZZ/ 0
;ZZ0 1
	_cellPool[[ 
=[[ 
new[[ 
List[[  $
<[[$ %
RectTransform[[% 2
>[[2 3
([[3 4
)[[4 5
;[[5 6
}\\ 
PrototypeCell__ 
.__ 

gameObject__ $
.__$ %
	SetActive__% .
(__. /
true__/ 3
)__3 4
;__4 5
	SetAnchor`` 
(`` 
PrototypeCell`` #
)``# $
;``$ %
_cellHeightcc 
=cc 
Contentcc !
.cc! "
rectcc" &
.cc& '
heightcc' -
/cc. /
_rowscc0 5
;cc5 6

_cellWidthdd 
=dd 
PrototypeCelldd &
.dd& '
	sizeDeltadd' 0
.dd0 1
xdd1 2
/dd3 4
PrototypeCelldd5 B
.ddB C
	sizeDeltaddC L
.ddL M
yddM N
*ddO P
_cellHeightddQ \
;dd\ ]
PrototypeCellee 
.ee 
	sizeDeltaee #
=ee$ %
newee& )
Vector3ee* 1
(ee1 2

_cellWidthee2 <
,ee< =
_cellHeightee> I
)eeI J
;eeJ K
_leftMostCellRowff 
=ff 
$numff  
;ff  !
_RightMostCellRowgg 
=gg 
$numgg  !
;gg! "
floatjj 
currentPoolCoveragejj %
=jj& '
$numjj( )
;jj) *
intkk 
poolSizekk 
=kk 
$numkk 
;kk 
floatll 
posXll 
=ll 
$numll 
;ll 
floatmm 
posYmm 
=mm 
$nummm 
;mm 
floatpp 
requriedCoveragepp "
=pp# $
MinPoolCoveragepp% 4
*pp5 6
Viewportpp7 ?
.pp? @
rectpp@ D
.ppD E
widthppE J
;ppJ K
intqq 
minPoolSizeqq 
=qq 
Mathqq "
.qq" #
Minqq# &
(qq& '
MinPoolSizeqq' 2
,qq2 3
_dataSourceqq4 ?
.qq? @
GetItemCountqq@ L
(qqL M
)qqM N
)qqN O
;qqO P
whiless 
(ss 
(ss 
poolSizess 
<ss 
minPoolSizess *
||ss+ -
currentPoolCoveragess. A
<ssB C
requriedCoveragessD T
)ssT U
&&ssV X
poolSizessY a
<ssb c
_dataSourcessd o
.sso p
GetItemCountssp |
(ss| }
)ss} ~
)ss~ 
{tt 
RectTransformvv 
itemvv "
=vv# $
(vv% &
UnityEnginevv& 1
.vv1 2
Objectvv2 8
.vv8 9
Instantiatevv9 D
(vvD E
PrototypeCellvvE R
.vvR S

gameObjectvvS ]
)vv] ^
)vv^ _
.vv_ `
GetComponentvv` l
<vvl m
RectTransformvvm z
>vvz {
(vv{ |
)vv| }
;vv} ~
itemww 
.ww 
nameww 
=ww 
$strww "
;ww" #
	_cellPoolxx 
.xx 
Addxx 
(xx 
itemxx "
)xx" #
;xx# $
itemyy 
.yy 
	SetParentyy 
(yy 
Contentyy &
,yy& '
falseyy( -
)yy- .
;yy. /
if{{ 
({{ 
IsGrid{{ 
){{ 
{|| 
posY}} 
=}} 
-}} 
_RightMostCellRow}} -
*}}. /
_cellHeight}}0 ;
;}}; <
item~~ 
.~~ 
anchoredPosition~~ )
=~~* +
new~~, /
Vector2~~0 7
(~~7 8
posX~~8 <
,~~< =
posY~~> B
)~~B C
;~~C D
if 
( 
++ 
_RightMostCellRow +
>=, .
_rows/ 4
)4 5
{
 
_RightMostCellRow
 )
=
* +
$num
, -
;
- .
posX
 
+=
 

_cellWidth
  *
;
* +!
currentPoolCoverage
 +
+=
, .
item
/ 3
.
3 4
rect
4 8
.
8 9
width
9 >
;
> ?
}
 
}
 
else
 
{
 
item
 
.
 
anchoredPosition
 )
=
* +
new
, /
Vector2
0 7
(
7 8
posX
8 <
,
< =
$num
> ?
)
? @
;
@ A
posX
 
=
 
item
 
.
  
anchoredPosition
  0
.
0 1
x
1 2
+
3 4
item
5 9
.
9 :
rect
: >
.
> ?
width
? D
;
D E!
currentPoolCoverage
 '
+=
( *
item
+ /
.
/ 0
rect
0 4
.
4 5
width
5 :
;
: ;
}
 
_cachedCells
 
.
 
Add
  
(
  !
item
! %
.
% &
GetComponent
& 2
<
2 3
ICell
3 8
>
8 9
(
9 :
)
: ;
)
; <
;
< =
_dataSource
 
.
 
SetCell
 #
(
# $
_cachedCells
$ 0
[
0 1
_cachedCells
1 =
.
= >
Count
> C
-
D E
$num
F G
]
G H
,
H I
poolSize
J R
)
R S
;
S T
poolSize
 
++
 
;
 
}
 
if
 
(
 
IsGrid
 
)
 
{
 
_RightMostCellRow
 !
=
" #
(
$ %
_RightMostCellRow
% 6
-
7 8
$num
9 :
+
; <
_rows
= B
)
B C
%
D E
_rows
F K
;
K L
}
 
if
 
(
 
PrototypeCell
 
.
 

gameObject
 (
.
( )
scene
) .
.
. /
IsValid
/ 6
(
6 7
)
7 8
)
8 9
{
 
PrototypeCell
 
.
 

gameObject
 (
.
( )
	SetActive
) 2
(
2 3
false
3 8
)
8 9
;
9 :
}
 
}
 	
Vector2
¡¡ 

zeroVector
¡¡ 
=
¡¡ 
Vector2
¡¡ $
.
¡¡$ %
zero
¡¡% )
;
¡¡) *
public
¢¢ 
override
¢¢ 
Vector2
¢¢ $
OnValueChangedListener
¢¢  6
(
¢¢6 7
Vector2
¢¢7 >
	direction
¢¢? H
)
¢¢H I
{
££ 	
if
¤¤ 
(
¤¤ 

_recycling
¤¤ 
||
¤¤ 
	_cellPool
¤¤ '
==
¤¤( *
null
¤¤+ /
||
¤¤0 2
	_cellPool
¤¤3 <
.
¤¤< =
Count
¤¤= B
==
¤¤C E
$num
¤¤F G
)
¤¤G H
return
¤¤I O

zeroVector
¤¤P Z
;
¤¤Z [ 
SetRecyclingBounds
§§ 
(
§§ 
)
§§  
;
§§  !
if
ªª 
(
ªª 
	direction
ªª 
.
ªª 
x
ªª 
<
ªª 
$num
ªª 
&&
ªª  "
	_cellPool
ªª# ,
[
ªª, - 
rightMostCellIndex
ªª- ?
]
ªª? @
.
ªª@ A
MinX
ªªA E
(
ªªE F
)
ªªF G
<
ªªH I#
_recyclableViewBounds
ªªJ _
.
ªª_ `
max
ªª` c
.
ªªc d
x
ªªd e
)
ªªe f
{
«« 
return
¬¬  
RecycleLeftToRight
¬¬ )
(
¬¬) *
)
¬¬* +
;
¬¬+ ,
}
­­ 
else
®® 
if
®® 
(
®® 
	direction
®® 
.
®® 
x
®®  
>
®®! "
$num
®®# $
&&
®®% '
	_cellPool
®®( 1
[
®®1 2
leftMostCellIndex
®®2 C
]
®®C D
.
®®D E
MaxX
®®E I
(
®®I J
)
®®J K
>
®®L M#
_recyclableViewBounds
®®N c
.
®®c d
min
®®d g
.
®®g h
x
®®h i
)
®®i j
{
¯¯ 
return
°°  
RecycleRightToleft
°° )
(
°°) *
)
°°* +
;
°°+ ,
}
±± 
return
²² 

zeroVector
²² 
;
²² 
}
³³ 	
private
¸¸ 
Vector2
¸¸  
RecycleLeftToRight
¸¸ *
(
¸¸* +
)
¸¸+ ,
{
¹¹ 	

_recycling
ºº 
=
ºº 
true
ºº 
;
ºº 
int
¼¼ 
n
¼¼ 
=
¼¼ 
$num
¼¼ 
;
¼¼ 
float
½½ 
posX
½½ 
=
½½ 
IsGrid
½½ 
?
½½  !
	_cellPool
½½" +
[
½½+ , 
rightMostCellIndex
½½, >
]
½½> ?
.
½½? @
anchoredPosition
½½@ P
.
½½P Q
x
½½Q R
:
½½S T
$num
½½U V
;
½½V W
float
¾¾ 
posY
¾¾ 
=
¾¾ 
$num
¾¾ 
;
¾¾ 
int
ÀÀ 
additionalColoums
ÀÀ !
=
ÀÀ" #
$num
ÀÀ$ %
;
ÀÀ% &
while
ÁÁ 
(
ÁÁ 
	_cellPool
ÁÁ 
[
ÁÁ 
leftMostCellIndex
ÁÁ .
]
ÁÁ. /
.
ÁÁ/ 0
MaxX
ÁÁ0 4
(
ÁÁ4 5
)
ÁÁ5 6
<
ÁÁ7 8#
_recyclableViewBounds
ÁÁ9 N
.
ÁÁN O
min
ÁÁO R
.
ÁÁR S
x
ÁÁS T
&&
ÁÁU W
currentItemCount
ÁÁX h
<
ÁÁi j
_dataSource
ÁÁk v
.
ÁÁv w
GetItemCountÁÁw 
(ÁÁ 
)ÁÁ 
)ÁÁ 
{
ÂÂ 
if
ÃÃ 
(
ÃÃ 
IsGrid
ÃÃ 
)
ÃÃ 
{
ÄÄ 
if
ÅÅ 
(
ÅÅ 
++
ÅÅ 
_RightMostCellRow
ÅÅ +
>=
ÅÅ, .
_rows
ÅÅ/ 4
)
ÅÅ4 5
{
ÆÆ 
n
ÇÇ 
++
ÇÇ 
;
ÇÇ 
_RightMostCellRow
ÈÈ )
=
ÈÈ* +
$num
ÈÈ, -
;
ÈÈ- .
posX
ÉÉ 
=
ÉÉ 
	_cellPool
ÉÉ (
[
ÉÉ( ) 
rightMostCellIndex
ÉÉ) ;
]
ÉÉ; <
.
ÉÉ< =
anchoredPosition
ÉÉ= M
.
ÉÉM N
x
ÉÉN O
+
ÉÉP Q

_cellWidth
ÉÉR \
;
ÉÉ\ ]
additionalColoums
ÊÊ )
++
ÊÊ) +
;
ÊÊ+ ,
}
ËË 
posY
ÌÌ 
=
ÌÌ 
-
ÌÌ 
_RightMostCellRow
ÌÌ -
*
ÌÌ. /
_cellHeight
ÌÌ0 ;
;
ÌÌ; <
	_cellPool
ÎÎ 
[
ÎÎ 
leftMostCellIndex
ÎÎ /
]
ÎÎ/ 0
.
ÎÎ0 1
anchoredPosition
ÎÎ1 A
=
ÎÎB C
new
ÎÎD G
Vector2
ÎÎH O
(
ÎÎO P
posX
ÎÎP T
,
ÎÎT U
posY
ÎÎV Z
)
ÎÎZ [
;
ÎÎ[ \
if
ÐÐ 
(
ÐÐ 
++
ÐÐ 
_leftMostCellRow
ÐÐ *
>=
ÐÐ+ -
_rows
ÐÐ. 3
)
ÐÐ3 4
{
ÑÑ 
_leftMostCellRow
ÒÒ (
=
ÒÒ) *
$num
ÒÒ+ ,
;
ÒÒ, -
additionalColoums
ÓÓ )
--
ÓÓ) +
;
ÓÓ+ ,
}
ÔÔ 
}
ÕÕ 
else
ÖÖ 
{
×× 
posX
ØØ 
=
ØØ 
	_cellPool
ØØ $
[
ØØ$ % 
rightMostCellIndex
ØØ% 7
]
ØØ7 8
.
ØØ8 9
anchoredPosition
ØØ9 I
.
ØØI J
x
ØØJ K
+
ØØL M
	_cellPool
ØØN W
[
ØØW X 
rightMostCellIndex
ØØX j
]
ØØj k
.
ØØk l
	sizeDelta
ØØl u
.
ØØu v
x
ØØv w
;
ØØw x
	_cellPool
ÙÙ 
[
ÙÙ 
leftMostCellIndex
ÙÙ /
]
ÙÙ/ 0
.
ÙÙ0 1
anchoredPosition
ÙÙ1 A
=
ÙÙB C
new
ÙÙD G
Vector2
ÙÙH O
(
ÙÙO P
posX
ÙÙP T
,
ÙÙT U
	_cellPool
ÙÙV _
[
ÙÙ_ `
leftMostCellIndex
ÙÙ` q
]
ÙÙq r
.
ÙÙr s
anchoredPositionÙÙs 
.ÙÙ 
yÙÙ 
)ÙÙ 
;ÙÙ 
}
ÚÚ 
_dataSource
ÜÜ 
.
ÜÜ 
SetCell
ÜÜ #
(
ÜÜ# $
_cachedCells
ÜÜ$ 0
[
ÜÜ0 1
leftMostCellIndex
ÜÜ1 B
]
ÜÜB C
,
ÜÜC D
currentItemCount
ÜÜE U
)
ÜÜU V
;
ÜÜV W 
rightMostCellIndex
ßß "
=
ßß# $
leftMostCellIndex
ßß% 6
;
ßß6 7
leftMostCellIndex
àà !
=
àà" #
(
àà$ %
leftMostCellIndex
àà% 6
+
àà7 8
$num
àà9 :
)
àà: ;
%
àà< =
	_cellPool
àà> G
.
ààG H
Count
ààH M
;
ààM N
currentItemCount
ââ  
++
ââ  "
;
ââ" #
if
ãã 
(
ãã 
!
ãã 
IsGrid
ãã 
)
ãã 
n
ãã 
++
ãã  
;
ãã  !
}
ää 
if
åå 
(
åå 
IsGrid
åå 
)
åå 
{
ææ 
Debug
çç 
.
çç 
Log
çç 
(
çç 
additionalColoums
çç +
)
çç+ ,
;
çç, -
Content
èè 
.
èè 
	sizeDelta
èè !
+=
èè" $
additionalColoums
èè% 6
*
èè7 8
Vector2
èè9 @
.
èè@ A
right
èèA F
*
èèG H

_cellWidth
èèI S
;
èèS T
n
éé 
-=
éé 
additionalColoums
éé &
;
éé& '
}
êê 
	_cellPool
ìì 
.
ìì 
ForEach
ìì 
(
ìì 
(
ìì 
RectTransform
ìì ,
cell
ìì- 1
)
ìì1 2
=>
ìì3 5
cell
ìì6 :
.
ìì: ;
anchoredPosition
ìì; K
-=
ììL N
n
ììO P
*
ììQ R
Vector2
ììS Z
.
ììZ [
right
ìì[ `
*
ììa b
	_cellPool
ììc l
[
ììl m
leftMostCellIndex
ììm ~
]
ìì~ 
.ìì 
	sizeDeltaìì 
.ìì 
xìì 
)ìì 
;ìì 
Content
íí 
.
íí 
anchoredPosition
íí $
+=
íí% '
n
íí( )
*
íí* +
Vector2
íí, 3
.
íí3 4
right
íí4 9
*
íí: ;
	_cellPool
íí< E
[
ííE F
leftMostCellIndex
ííF W
]
ííW X
.
ííX Y
	sizeDelta
ííY b
.
ííb c
x
ííc d
;
ííd e

_recycling
îî 
=
îî 
false
îî 
;
îî 
return
ïï 
n
ïï 
*
ïï 
Vector2
ïï 
.
ïï 
right
ïï $
*
ïï% &
	_cellPool
ïï' 0
[
ïï0 1
leftMostCellIndex
ïï1 B
]
ïïB C
.
ïïC D
	sizeDelta
ïïD M
.
ïïM N
x
ïïN O
;
ïïO P
}
ññ 	
private
öö 
Vector2
öö  
RecycleRightToleft
öö *
(
öö* +
)
öö+ ,
{
÷÷ 	

_recycling
øø 
=
øø 
true
øø 
;
øø 
int
úú 
n
úú 
=
úú 
$num
úú 
;
úú 
float
ûû 
posX
ûû 
=
ûû 
IsGrid
ûû 
?
ûû  !
	_cellPool
ûû" +
[
ûû+ ,
leftMostCellIndex
ûû, =
]
ûû= >
.
ûû> ?
anchoredPosition
ûû? O
.
ûûO P
x
ûûP Q
:
ûûR S
$num
ûûT U
;
ûûU V
float
üü 
posY
üü 
=
üü 
$num
üü 
;
üü 
int
þþ 
additionalColoums
þþ !
=
þþ" #
$num
þþ$ %
;
þþ% &
while
ÿÿ 
(
ÿÿ 
	_cellPool
ÿÿ 
[
ÿÿ  
rightMostCellIndex
ÿÿ /
]
ÿÿ/ 0
.
ÿÿ0 1
MinX
ÿÿ1 5
(
ÿÿ5 6
)
ÿÿ6 7
>
ÿÿ8 9#
_recyclableViewBounds
ÿÿ: O
.
ÿÿO P
max
ÿÿP S
.
ÿÿS T
x
ÿÿT U
&&
ÿÿV X
currentItemCount
ÿÿY i
>
ÿÿj k
	_cellPool
ÿÿl u
.
ÿÿu v
Count
ÿÿv {
)
ÿÿ{ |
{
 
if
 
(
 
IsGrid
 
)
 
{
 
if
 
(
 
--
 
_leftMostCellRow
 *
<
+ ,
$num
- .
)
. /
{
 
n
 
++
 
;
 
_leftMostCellRow
 (
=
) *
_rows
+ 0
-
1 2
$num
3 4
;
4 5
posX
 
=
 
	_cellPool
 (
[
( )
leftMostCellIndex
) :
]
: ;
.
; <
anchoredPosition
< L
.
L M
x
M N
-
O P

_cellWidth
Q [
;
[ \
additionalColoums
 )
++
) +
;
+ ,
}
 
posY
 
=
 
-
 
_leftMostCellRow
 ,
*
- .
_cellHeight
/ :
;
: ;
	_cellPool
 
[
  
rightMostCellIndex
 0
]
0 1
.
1 2
anchoredPosition
2 B
=
C D
new
E H
Vector2
I P
(
P Q
posX
Q U
,
U V
posY
W [
)
[ \
;
\ ]
if
 
(
 
--
 
_RightMostCellRow
 +
<
, -
$num
. /
)
/ 0
{
 
_RightMostCellRow
 )
=
* +
_rows
, 1
-
2 3
$num
4 5
;
5 6
additionalColoums
 )
--
) +
;
+ ,
}
 
}
 
else
 
{
 
posX
 
=
 
	_cellPool
 $
[
$ %
leftMostCellIndex
% 6
]
6 7
.
7 8
anchoredPosition
8 H
.
H I
x
I J
-
K L
	_cellPool
M V
[
V W
leftMostCellIndex
W h
]
h i
.
i j
	sizeDelta
j s
.
s t
x
t u
;
u v
	_cellPool
 
[
  
rightMostCellIndex
 0
]
0 1
.
1 2
anchoredPosition
2 B
=
C D
new
E H
Vector2
I P
(
P Q
posX
Q U
,
U V
	_cellPool
W `
[
` a 
rightMostCellIndex
a s
]
s t
.
t u
anchoredPositionu 
. 
y 
) 
; 
n
 
++
 
;
 
}
 
currentItemCount
  
--
  "
;
" #
_dataSource
 
.
 
SetCell
 #
(
# $
_cachedCells
$ 0
[
0 1 
rightMostCellIndex
1 C
]
C D
,
D E
currentItemCount
F V
-
W X
	_cellPool
Y b
.
b c
Count
c h
)
h i
;
i j
leftMostCellIndex
   !
=
  " # 
rightMostCellIndex
  $ 6
;
  6 7 
rightMostCellIndex
¡¡ "
=
¡¡# $
(
¡¡% & 
rightMostCellIndex
¡¡& 8
-
¡¡9 :
$num
¡¡; <
+
¡¡= >
	_cellPool
¡¡? H
.
¡¡H I
Count
¡¡I N
)
¡¡N O
%
¡¡P Q
	_cellPool
¡¡R [
.
¡¡[ \
Count
¡¡\ a
;
¡¡a b
}
¢¢ 
if
¤¤ 
(
¤¤ 
IsGrid
¤¤ 
)
¤¤ 
{
¥¥ 
Debug
¦¦ 
.
¦¦ 
Log
¦¦ 
(
¦¦ 
additionalColoums
¦¦ +
)
¦¦+ ,
;
¦¦, -
Content
§§ 
.
§§ 
	sizeDelta
§§ !
+=
§§" $
additionalColoums
§§% 6
*
§§7 8
Vector2
§§9 @
.
§§@ A
right
§§A F
*
§§G H

_cellWidth
§§I S
;
§§S T
if
¨¨ 
(
¨¨ 
additionalColoums
¨¨ %
>
¨¨& '
$num
¨¨( )
)
¨¨) *
{
©© 
n
ªª 
-=
ªª 
additionalColoums
ªª *
;
ªª* +
}
«« 
}
¬¬ 
	_cellPool
¯¯ 
.
¯¯ 
ForEach
¯¯ 
(
¯¯ 
(
¯¯ 
RectTransform
¯¯ ,
cell
¯¯- 1
)
¯¯1 2
=>
¯¯3 5
cell
¯¯6 :
.
¯¯: ;
anchoredPosition
¯¯; K
+=
¯¯L N
n
¯¯O P
*
¯¯Q R
Vector2
¯¯S Z
.
¯¯Z [
right
¯¯[ `
*
¯¯a b
	_cellPool
¯¯c l
[
¯¯l m
leftMostCellIndex
¯¯m ~
]
¯¯~ 
.¯¯ 
	sizeDelta¯¯ 
.¯¯ 
x¯¯ 
)¯¯ 
;¯¯ 
Content
°° 
.
°° 
anchoredPosition
°° $
-=
°°% '
n
°°( )
*
°°* +
Vector2
°°, 3
.
°°3 4
right
°°4 9
*
°°: ;
	_cellPool
°°< E
[
°°E F
leftMostCellIndex
°°F W
]
°°W X
.
°°X Y
	sizeDelta
°°Y b
.
°°b c
x
°°c d
;
°°d e

_recycling
±± 
=
±± 
false
±± 
;
±± 
return
²² 
-
²² 
n
²² 
*
²² 
Vector2
²² 
.
²²  
right
²²  %
*
²²& '
	_cellPool
²²( 1
[
²²1 2
leftMostCellIndex
²²2 C
]
²²C D
.
²²D E
	sizeDelta
²²E N
.
²²N O
x
²²O P
;
²²P Q
}
³³ 	
private
»» 
void
»» 
	SetAnchor
»» 
(
»» 
RectTransform
»» ,
rectTransform
»»- :
)
»»: ;
{
¼¼ 	
float
¾¾ 
width
¾¾ 
=
¾¾ 
rectTransform
¾¾ '
.
¾¾' (
rect
¾¾( ,
.
¾¾, -
width
¾¾- 2
;
¾¾2 3
float
¿¿ 
height
¿¿ 
=
¿¿ 
rectTransform
¿¿ (
.
¿¿( )
rect
¿¿) -
.
¿¿- .
height
¿¿. 4
;
¿¿4 5
Vector2
ÁÁ 
pos
ÁÁ 
=
ÁÁ 
IsGrid
ÁÁ  
?
ÁÁ! "
new
ÁÁ# &
Vector2
ÁÁ' .
(
ÁÁ. /
$num
ÁÁ/ 0
,
ÁÁ0 1
$num
ÁÁ2 3
)
ÁÁ3 4
:
ÁÁ5 6
new
ÁÁ7 :
Vector2
ÁÁ; B
(
ÁÁB C
$num
ÁÁC D
,
ÁÁD E
$num
ÁÁF J
)
ÁÁJ K
;
ÁÁK L
rectTransform
ÄÄ 
.
ÄÄ 
	anchorMin
ÄÄ #
=
ÄÄ$ %
pos
ÄÄ& )
;
ÄÄ) *
rectTransform
ÅÅ 
.
ÅÅ 
	anchorMax
ÅÅ #
=
ÅÅ$ %
pos
ÅÅ& )
;
ÅÅ) *
rectTransform
ÆÆ 
.
ÆÆ 
pivot
ÆÆ 
=
ÆÆ  !
pos
ÆÆ" %
;
ÆÆ% &
rectTransform
ÉÉ 
.
ÉÉ 
	sizeDelta
ÉÉ #
=
ÉÉ$ %
new
ÉÉ& )
Vector2
ÉÉ* 1
(
ÉÉ1 2
width
ÉÉ2 7
,
ÉÉ7 8
height
ÉÉ9 ?
)
ÉÉ? @
;
ÉÉ@ A
}
ÊÊ 	
public
ÏÏ 
void
ÏÏ 
OnDrawGizmos
ÏÏ  
(
ÏÏ  !
)
ÏÏ! "
{
ÐÐ 	
Gizmos
ÑÑ 
.
ÑÑ 
color
ÑÑ 
=
ÑÑ 
Color
ÑÑ  
.
ÑÑ  !
green
ÑÑ! &
;
ÑÑ& '
Gizmos
ÒÒ 
.
ÒÒ 
DrawLine
ÒÒ 
(
ÒÒ #
_recyclableViewBounds
ÒÒ 1
.
ÒÒ1 2
min
ÒÒ2 5
-
ÒÒ6 7
new
ÒÒ8 ;
Vector3
ÒÒ< C
(
ÒÒC D
$num
ÒÒD E
,
ÒÒE F
$num
ÒÒG K
)
ÒÒK L
,
ÒÒL M#
_recyclableViewBounds
ÒÒN c
.
ÒÒc d
min
ÒÒd g
+
ÒÒh i
new
ÒÒj m
Vector3
ÒÒn u
(
ÒÒu v
$num
ÒÒv w
,
ÒÒw x
$num
ÒÒy }
)
ÒÒ} ~
)
ÒÒ~ 
;ÒÒ 
Gizmos
ÓÓ 
.
ÓÓ 
color
ÓÓ 
=
ÓÓ 
Color
ÓÓ  
.
ÓÓ  !
red
ÓÓ! $
;
ÓÓ$ %
Gizmos
ÔÔ 
.
ÔÔ 
DrawLine
ÔÔ 
(
ÔÔ #
_recyclableViewBounds
ÔÔ 1
.
ÔÔ1 2
max
ÔÔ2 5
-
ÔÔ6 7
new
ÔÔ8 ;
Vector3
ÔÔ< C
(
ÔÔC D
$num
ÔÔD E
,
ÔÔE F
$num
ÔÔG K
)
ÔÔK L
,
ÔÔL M#
_recyclableViewBounds
ÔÔN c
.
ÔÔc d
max
ÔÔd g
+
ÔÔh i
new
ÔÔj m
Vector3
ÔÔn u
(
ÔÔu v
$num
ÔÔv w
,
ÔÔw x
$num
ÔÔy }
)
ÔÔ} ~
)
ÔÔ~ 
;ÔÔ 
}
ÕÕ 	
}
ØØ 
}ÚÚ ¢
]D:\GitHub-Projects\Recyclable-Scroll-Rect\Assets\Recyclable Scroll Rect\Main\Scripts\ICell.cs
	namespace		 	
PolyAndCode		
 
.		 
UI		 
{

 
public 

	interface 
ICell 
{ 
} 
} Ú
wD:\GitHub-Projects\Recyclable-Scroll-Rect\Assets\Recyclable Scroll Rect\Main\Scripts\IRecyclableScrollRectDataSource.cs
	namespace		 	
PolyAndCode		
 
.		 
UI		 
{

 
public 

	interface +
IRecyclableScrollRectDataSource 4
{ 
int 
GetItemCount 
( 
) 
; 
void 
SetCell 
( 
ICell 
cell 
,  
int! $
index% *
)* +
;+ ,
} 
} ­.
lD:\GitHub-Projects\Recyclable-Scroll-Rect\Assets\Recyclable Scroll Rect\Main\Scripts\RecyclableScrollRect.cs
	namespace		 	
PolyAndCode		
 
.		 
UI		 
{

 
public 

class  
RecyclableScrollRect %
:& '

ScrollRect( 2
{ 
public 
bool 
Grid 
; 
public 
enum 
DirectionType !
{ 	
Vertical 
, 

Horizontal 
} 	
public 
DirectionType 
	Direction &
;& '
public 
int 
Segments 
{ 
set 
{ 
	_segments 
= 
Math  
.  !
Max! $
($ %
value% *
,* +
$num, -
)- .
;. /
} 
get 
{ 
return 
	_segments  
;  !
} 
}   	
["" 	
SerializeField""	 
]"" 
private## 
int## 
	_segments## 
;## 
public$$ 
RectTransform$$ 
PrototypeCell$$ *
;$$* +
public%% 
bool%% 
SelfInitialize%% "
=%%# $
true%%% )
;%%) *
['' 	
HideInInspector''	 
]'' 
public(( +
IRecyclableScrollRectDataSource(( .

DataSource((/ 9
;((9 :
private** 
RecyclingSystem**  
recyclableScrollRect**  4
;**4 5
	protected,, 
override,, 
void,, 
Start,,  %
(,,% &
),,& '
{-- 	
vertical// 
=// 
false// 
;// 

horizontal00 
=00 
true00 
;00 
if22 
(22 
!22 
Application22 
.22 
	isPlaying22 &
)22& '
return22( .
;22. /
if44 
(44 
SelfInitialize44 
)44 

Initialize44  *
(44* +
)44+ ,
;44, -
}55 	
private88 
void88 

Initialize88 
(88  
)88  !
{99 	
if:: 
(:: 
	Direction:: 
==:: 
DirectionType:: *
.::* +
Vertical::+ 3
)::3 4
{;;  
recyclableScrollRect<< $
=<<% &
new<<' *#
VerticalRecyclingSystem<<+ B
(<<B C
PrototypeCell<<C P
,<<P Q
viewport<<R Z
,<<Z [
content<<\ c
,<<c d

DataSource<<e o
,<<o p
Grid<<q u
,<<u v
Segments<<w 
)	<< 
;
<< 
}== 
else>> 
if>> 
(>> 
	Direction>> 
==>> !
DirectionType>>" /
.>>/ 0

Horizontal>>0 :
)>>: ;
{??  
recyclableScrollRect@@ $
=@@% &
new@@' *%
HorizontalRecyclingSystem@@+ D
(@@D E
PrototypeCell@@E R
,@@R S
viewport@@T \
,@@\ ]
content@@^ e
,@@e f

DataSource@@g q
,@@q r
Grid@@s w
,@@w x
Segments	@@y 
)
@@ 
;
@@ 
}AA 
verticalCC 
=CC 
	DirectionCC  
==CC! #
DirectionTypeCC$ 1
.CC1 2
VerticalCC2 :
;CC: ;

horizontalDD 
=DD 
	DirectionDD "
==DD# %
DirectionTypeDD& 3
.DD3 4

HorizontalDD4 >
;DD> ?
onValueChangedFF 
.FF 
RemoveListenerFF )
(FF) *"
OnValueChangedListenerFF* @
)FF@ A
;FFA B
StartCoroutineHH 
(HH  
recyclableScrollRectHH /
.HH/ 0
InitCoroutineHH0 =
(HH= >
(HH> ?
)HH? @
=>HHA C
onValueChangedII? M
.IIM N
AddListenerIIN Y
(IIY Z"
OnValueChangedListenerIIZ p
)IIp q
)JJ> ?
)JJ? @
;JJ@ A
}KK 	
publicMM 
voidMM 

InitializeMM 
(MM +
IRecyclableScrollRectDataSourceMM >

dataSourceMM? I
)MMI J
{NN 	

DataSourceOO 
=OO 

dataSourceOO #
;OO# $

InitializePP 
(PP 
)PP 
;PP 
}QQ 	
publicTT 
voidTT "
OnValueChangedListenerTT *
(TT* +
Vector2TT+ 2
argsTT3 7
)TT7 8
{UU 	"
m_ContentStartPositionVV "
+=VV# % 
recyclableScrollRectVV& :
.VV: ;"
OnValueChangedListenerVV; Q
(VVQ R
velocityVVR Z
)VVZ [
;VV[ \
}WW 	
privateZZ 
voidZZ 
OnDrawGizmosZZ !
(ZZ! "
)ZZ" #
{[[ 	
if\\ 
(\\  
recyclableScrollRect\\ $
is\\% '#
VerticalRecyclingSystem\\( ?
)\\? @
{]] 
(^^ 
(^^ #
VerticalRecyclingSystem^^ )
)^^) * 
recyclableScrollRect^^* >
)^^> ?
.^^? @
OnDrawGizmos^^@ L
(^^L M
)^^M N
;^^N O
}__ 
ifaa 
(aa  
recyclableScrollRectaa $
isaa% '%
HorizontalRecyclingSystemaa( A
)aaA B
{bb 
(cc 
(cc %
HorizontalRecyclingSystemcc +
)cc+ , 
recyclableScrollRectcc, @
)cc@ A
.ccA B
OnDrawGizmosccB N
(ccN O
)ccO P
;ccP Q
}dd 
}ff 	
}ii 
}jj æ

gD:\GitHub-Projects\Recyclable-Scroll-Rect\Assets\Recyclable Scroll Rect\Main\Scripts\RecyclingSystem.cs
	namespace 	
PolyAndCode
 
. 
UI 
{ 
public 

abstract 
class 
RecyclingSystem )
{ 
	protected 
RectTransform 
Viewport  (
,( )
Content* 1
;1 2
	protected 
bool 
IsGrid 
; 
	protected		 
RectTransform		 
PrototypeCell		  -
;		- .
	protected 
float 
MinPoolCoverage '
=( )
$num* .
;. /
	protected 
int 
MinPoolSize !
=" #
$num$ &
;& '
	protected 
float 
RecyclingThreshold *
=+ ,
$num- 0
;0 1
public 
abstract 
IEnumerator #
InitCoroutine$ 1
(1 2
System2 8
.8 9
Action9 ?
onInitialized@ M
)M N
;N O
public 
abstract 
Vector2 "
OnValueChangedListener  6
(6 7
Vector27 >
	direction? H
)H I
;I J
} 
} Á
cD:\GitHub-Projects\Recyclable-Scroll-Rect\Assets\Recyclable Scroll Rect\Main\Scripts\UIExtension.cs
public

 
static

 
class

 
UIExtension

 
{ 
public 

static 
float 
MaxY 
( 
this !
RectTransform" /
rectTransform0 =
)= >
{ 
Vector3 
[ 
] 
corners 
= 
new 
Vector3  '
[' (
$num( )
]) *
;* +
rectTransform 
. 
GetWorldCorners %
(% &
corners& -
)- .
;. /
return 
corners 
[ 
$num 
] 
. 
y 
; 
} 
public 

static 
float 
MinY 
( 
this !
RectTransform" /
rectTransform0 =
)= >
{ 
Vector3 
[ 
] 
corners 
= 
new 
Vector3  '
[' (
$num( )
]) *
;* +
rectTransform 
. 
GetWorldCorners %
(% &
corners& -
)- .
;. /
return 
corners 
[ 
$num 
] 
. 
y 
; 
} 
public 

static 
float 
MaxX 
( 
this !
RectTransform" /
rectTransform0 =
)= >
{ 
Vector3 
[ 
] 
corners 
= 
new 
Vector3  '
[' (
$num( )
]) *
;* +
rectTransform 
. 
GetWorldCorners %
(% &
corners& -
)- .
;. /
return 
corners 
[ 
$num 
] 
. 
x 
; 
} 
public!! 

static!! 
float!! 
MinX!! 
(!! 
this!! !
RectTransform!!" /
rectTransform!!0 =
)!!= >
{"" 
Vector3## 
[## 
]## 
corners## 
=## 
new## 
Vector3##  '
[##' (
$num##( )
]##) *
;##* +
rectTransform$$ 
.$$ 
GetWorldCorners$$ %
($$% &
corners$$& -
)$$- .
;$$. /
return%% 
corners%% 
[%% 
$num%% 
]%% 
.%% 
x%% 
;%% 
}&& 
}(( 
oD:\GitHub-Projects\Recyclable-Scroll-Rect\Assets\Recyclable Scroll Rect\Main\Scripts\VerticalRecyclingSystem.cs
	namespace 	
PolyAndCode
 
. 
UI 
{ 
public 

class #
VerticalRecyclingSystem (
:) *
RecyclingSystem+ :
{		 
private 
readonly +
IRecyclableScrollRectDataSource 8
_dataSource9 D
;D E
private 
readonly 
int 
	_coloumns &
;& '
private 
float 

_cellWidth  
,  !
_cellHeight" -
;- .
private 
int 
_topMostCellColoumn '
,' ("
_bottomMostCellColoumn) ?
;? @
public 
bool 
SelfInitialize "
=# $
true% )
;) *
private 
List 
< 
RectTransform "
>" #
	_cellPool$ -
;- .
private 
List 
< 
ICell 
> 
_cachedCells (
;( )
private 
Bounds !
_recyclableViewBounds ,
;, -
private 
readonly 
Vector3  
[  !
]! "
_corners# +
=, -
new. 1
Vector32 9
[9 :
$num: ;
]; <
;< =
private 
bool 

_recycling 
;  
private   
int   
topMostCellIndex   $
,  $ %
bottomMostCellIndex  & 9
;  9 :
private!! 
int!! 
currentItemCount!! $
;!!$ %
private## 
Vector2## 

zeroVector## "
=### $
Vector2##% ,
.##, -
zero##- 1
;##1 2
public%% #
VerticalRecyclingSystem%% &
(%%& '
RectTransform%%' 4
prototypeCell%%5 B
,%%B C
RectTransform%%D Q
viewport%%R Z
,%%Z [
RectTransform%%\ i
content%%j q
,%%q r,
IRecyclableScrollRectDataSource	%%s 

dataSource
%% 
,
%% 
bool
%% £
isGrid
%%¤ ª
,
%%ª «
int
%%¬ ¯
coloumns
%%° ¸
)
%%¸ ¹
{&& 	
PrototypeCell'' 
='' 
prototypeCell'' )
;'') *
Viewport(( 
=(( 
viewport(( 
;((  
Content)) 
=)) 
content)) 
;)) 
_dataSource** 
=** 

dataSource** $
;**$ %
IsGrid++ 
=++ 
isGrid++ 
;++ 
	_coloumns-- 
=-- 
isGrid-- 
?--  
coloumns--! )
:--* +
$num--, -
;--- .
}.. 	
public44 
override44 
IEnumerator44 #
InitCoroutine44$ 1
(441 2
System442 8
.448 9
Action449 ?
onInitialized44@ M
)44M N
{55 	
SetTopAnchor66 
(66 
Content66  
)66  !
;66! "
Content77 
.77 
anchoredPosition77 $
=77% &
Vector377' .
.77. /
zero77/ 3
;773 4
yield88 
return88 
null88 
;88 
SetRecyclingBounds99 
(99 
)99  
;99  !
CreateCellPool<< 
(<< 
)<< 
;<< 
topMostCellIndex>> 
=>> 
$num>>  
;>>  !
bottomMostCellIndex?? 
=??  !
	_cellPool??" +
.??+ ,
Count??, 1
-??2 3
$num??4 5
;??5 6
intAA 
noOfRowsAA 
=AA 
(AA 
intAA 
)AA  
MathfAA  %
.AA% &
CeilAA& *
(AA* +
(AA+ ,
floatAA, 1
)AA1 2
	_cellPoolAA2 ;
.AA; <
CountAA< A
/AAB C
(AAD E
floatAAE J
)AAJ K
	_coloumnsAAK T
)AAT U
;AAU V
floatDD 
contentYSizeDD 
=DD  
noOfRowsDD! )
*DD* +
PrototypeCellDD, 9
.DD9 :
	sizeDeltaDD: C
.DDC D
yDDD E
;DDE F
ContentEE 
.EE 
	sizeDeltaEE 
=EE 
newEE  #
Vector2EE$ +
(EE+ ,
ContentEE, 3
.EE3 4
	sizeDeltaEE4 =
.EE= >
xEE> ?
,EE? @
contentYSizeEEA M
)EEM N
;EEN O
currentItemCountFF 
=FF 
	_cellPoolFF (
.FF( )
CountFF) .
;FF. /
SetTopAnchorGG 
(GG 
ContentGG  
)GG  !
;GG! "
ifII 
(II 
onInitializedII 
!=II  
nullII! %
)II% &
onInitializedII' 4
(II4 5
)II5 6
;II6 7
}JJ 	
privateOO 
voidOO 
SetRecyclingBoundsOO '
(OO' (
)OO( )
{PP 	
ViewportQQ 
.QQ 
GetWorldCornersQQ $
(QQ$ %
_cornersQQ% -
)QQ- .
;QQ. /
floatRR 

threshHoldRR 
=RR 
RecyclingThresholdRR 1
*RR2 3
(RR4 5
_cornersRR5 =
[RR= >
$numRR> ?
]RR? @
.RR@ A
yRRA B
-RRC D
_cornersRRE M
[RRM N
$numRRN O
]RRO P
.RRP Q
yRRQ R
)RRR S
;RRS T!
_recyclableViewBoundsSS !
.SS! "
minSS" %
=SS& '
newSS( +
Vector3SS, 3
(SS3 4
_cornersSS4 <
[SS< =
$numSS= >
]SS> ?
.SS? @
xSS@ A
,SSA B
_cornersSSC K
[SSK L
$numSSL M
]SSM N
.SSN O
ySSO P
-SSQ R

threshHoldSSS ]
)SS] ^
;SS^ _!
_recyclableViewBoundsTT !
.TT! "
maxTT" %
=TT& '
newTT( +
Vector3TT, 3
(TT3 4
_cornersTT4 <
[TT< =
$numTT= >
]TT> ?
.TT? @
xTT@ A
,TTA B
_cornersTTC K
[TTK L
$numTTL M
]TTM N
.TTN O
yTTO P
+TTQ R

threshHoldTTS ]
)TT] ^
;TT^ _
}UU 	
privateZZ 
voidZZ 
CreateCellPoolZZ #
(ZZ# $
)ZZ$ %
{[[ 	
if]] 
(]] 
	_cellPool]] 
!=]] 
null]] !
)]]! "
{^^ 
	_cellPool__ 
.__ 
ForEach__ !
(__! "
(__" #
RectTransform__# 0
item__1 5
)__5 6
=>__7 9
UnityEngine__: E
.__E F
Object__F L
.__L M
Destroy__M T
(__T U
item__U Y
.__Y Z

gameObject__Z d
)__d e
)__e f
;__f g
	_cellPool`` 
.`` 
Clear`` 
(``  
)``  !
;``! "
_cachedCellsaa 
.aa 
Clearaa "
(aa" #
)aa# $
;aa$ %
}bb 
elsecc 
{dd 
_cachedCellsee 
=ee 
newee "
Listee# '
<ee' (
ICellee( -
>ee- .
(ee. /
)ee/ 0
;ee0 1
	_cellPoolff 
=ff 
newff 
Listff  $
<ff$ %
RectTransformff% 2
>ff2 3
(ff3 4
)ff4 5
;ff5 6
}gg 
PrototypeCelljj 
.jj 

gameObjectjj $
.jj$ %
	SetActivejj% .
(jj. /
truejj/ 3
)jj3 4
;jj4 5
ifkk 
(kk 
IsGridkk 
)kk 
{ll 
SetTopLeftAnchormm  
(mm  !
PrototypeCellmm! .
)mm. /
;mm/ 0
}nn 
elseoo 
{pp 
SetTopAnchorqq 
(qq 
PrototypeCellqq *
)qq* +
;qq+ ,
}rr 
floatuu 
currentPoolCoverageuu %
=uu& '
$numuu( )
;uu) *
intvv 
poolSizevv 
=vv 
$numvv 
;vv 
floatxx 
posXxx 
=xx 
$numxx 
;xx 
floatyy 
posYyy 
=yy 
$numyy 
;yy 

_cellWidth{{ 
={{ 
Content{{  
.{{  !
rect{{! %
.{{% &
width{{& +
/{{, -
	_coloumns{{. 7
;{{7 8
_cellHeight|| 
=|| 
PrototypeCell|| '
.||' (
	sizeDelta||( 1
.||1 2
y||2 3
/||4 5
PrototypeCell||6 C
.||C D
	sizeDelta||D M
.||M N
x||N O
*||P Q

_cellWidth||R \
;||\ ]
PrototypeCell}} 
.}} 
	sizeDelta}} #
=}}$ %
new}}& )
Vector3}}* 1
(}}1 2

_cellWidth}}2 <
,}}< =
_cellHeight}}> I
)}}I J
;}}J K
float
 
requriedCoverage
 "
=
# $
MinPoolCoverage
% 4
*
5 6
Viewport
7 ?
.
? @
rect
@ D
.
D E
height
E K
;
K L
int
 
minPoolSize
 
=
 
Math
 "
.
" #
Min
# &
(
& '
MinPoolSize
' 2
,
2 3
_dataSource
4 ?
.
? @
GetItemCount
@ L
(
L M
)
M N
)
N O
;
O P
while
 
(
 
(
 
poolSize
 
<
 
minPoolSize
 *
||
+ -!
currentPoolCoverage
. A
<
B C
requriedCoverage
D T
)
T U
&&
V X
poolSize
Y a
<
b c
_dataSource
d o
.
o p
GetItemCount
p |
(
| }
)
} ~
)
~ 
{
 
RectTransform
 
item
 "
=
# $
(
% &
UnityEngine
& 1
.
1 2
Object
2 8
.
8 9
Instantiate
9 D
(
D E
PrototypeCell
E R
.
R S

gameObject
S ]
)
] ^
)
^ _
.
_ `
GetComponent
` l
<
l m
RectTransform
m z
>
z {
(
{ |
)
| }
;
} ~
item
 
.
 
name
 
=
 
$str
 "
;
" #
	_cellPool
 
.
 
Add
 
(
 
item
 "
)
" #
;
# $
item
 
.
 
	SetParent
 
(
 
Content
 &
,
& '
false
( -
)
- .
;
. /
if
 
(
 
IsGrid
 
)
 
{
 
posX
 
=
 $
_bottomMostCellColoumn
 1
*
2 3

_cellWidth
4 >
;
> ?
item
 
.
 
anchoredPosition
 )
=
* +
new
, /
Vector2
0 7
(
7 8
posX
8 <
,
< =
posY
> B
)
B C
;
C D
if
 
(
 
++
 $
_bottomMostCellColoumn
 0
>=
1 3
	_coloumns
4 =
)
= >
{
 $
_bottomMostCellColoumn
 .
=
/ 0
$num
1 2
;
2 3
posY
 
-=
 
_cellHeight
  +
;
+ ,!
currentPoolCoverage
 +
+=
, .
item
/ 3
.
3 4
rect
4 8
.
8 9
height
9 ?
;
? @
}
 
}
 
else
 
{
 
item
 
.
 
anchoredPosition
 )
=
* +
new
, /
Vector2
0 7
(
7 8
$num
8 9
,
9 :
posY
; ?
)
? @
;
@ A
posY
 
=
 
item
 
.
  
anchoredPosition
  0
.
0 1
y
1 2
-
3 4
item
5 9
.
9 :
rect
: >
.
> ?
height
? E
;
E F!
currentPoolCoverage
 '
+=
( *
item
+ /
.
/ 0
rect
0 4
.
4 5
height
5 ;
;
; <
}
 
_cachedCells
¡¡ 
.
¡¡ 
Add
¡¡  
(
¡¡  !
item
¡¡! %
.
¡¡% &
GetComponent
¡¡& 2
<
¡¡2 3
ICell
¡¡3 8
>
¡¡8 9
(
¡¡9 :
)
¡¡: ;
)
¡¡; <
;
¡¡< =
_dataSource
¢¢ 
.
¢¢ 
SetCell
¢¢ #
(
¢¢# $
_cachedCells
¢¢$ 0
[
¢¢0 1
_cachedCells
¢¢1 =
.
¢¢= >
Count
¢¢> C
-
¢¢D E
$num
¢¢F G
]
¢¢G H
,
¢¢H I
poolSize
¢¢J R
)
¢¢R S
;
¢¢S T
poolSize
¥¥ 
++
¥¥ 
;
¥¥ 
}
¦¦ 
if
©© 
(
©© 
IsGrid
©© 
)
©© 
{
ªª $
_bottomMostCellColoumn
«« &
=
««' (
(
««) *$
_bottomMostCellColoumn
««* @
-
««A B
$num
««C D
+
««E F
	_coloumns
««G P
)
««P Q
%
««R S
	_coloumns
««T ]
;
««] ^
}
¬¬ 
if
¯¯ 
(
¯¯ 
PrototypeCell
¯¯ 
.
¯¯ 

gameObject
¯¯ (
.
¯¯( )
scene
¯¯) .
.
¯¯. /
IsValid
¯¯/ 6
(
¯¯6 7
)
¯¯7 8
)
¯¯8 9
{
°° 
PrototypeCell
±± 
.
±± 

gameObject
±± (
.
±±( )
	SetActive
±±) 2
(
±±2 3
false
±±3 8
)
±±8 9
;
±±9 :
}
²² 
}
³³ 	
public
ºº 
override
ºº 
Vector2
ºº $
OnValueChangedListener
ºº  6
(
ºº6 7
Vector2
ºº7 >
	direction
ºº? H
)
ººH I
{
»» 	
if
¼¼ 
(
¼¼ 

_recycling
¼¼ 
||
¼¼ 
	_cellPool
¼¼ '
==
¼¼( *
null
¼¼+ /
||
¼¼0 2
	_cellPool
¼¼3 <
.
¼¼< =
Count
¼¼= B
==
¼¼C E
$num
¼¼F G
)
¼¼G H
return
¼¼I O

zeroVector
¼¼P Z
;
¼¼Z [ 
SetRecyclingBounds
¿¿ 
(
¿¿ 
)
¿¿  
;
¿¿  !
if
ÀÀ 
(
ÀÀ 
	direction
ÀÀ 
.
ÀÀ 
y
ÀÀ 
>
ÀÀ 
$num
ÀÀ 
&&
ÀÀ  "
	_cellPool
ÀÀ# ,
[
ÀÀ, -!
bottomMostCellIndex
ÀÀ- @
]
ÀÀ@ A
.
ÀÀA B
MaxY
ÀÀB F
(
ÀÀF G
)
ÀÀG H
>
ÀÀI J#
_recyclableViewBounds
ÀÀK `
.
ÀÀ` a
min
ÀÀa d
.
ÀÀd e
y
ÀÀe f
)
ÀÀf g
{
ÁÁ 
return
ÂÂ  
RecycleTopToBottom
ÂÂ )
(
ÂÂ) *
)
ÂÂ* +
;
ÂÂ+ ,
}
ÃÃ 
else
ÄÄ 
if
ÄÄ 
(
ÄÄ 
	direction
ÄÄ 
.
ÄÄ 
y
ÄÄ  
<
ÄÄ! "
$num
ÄÄ# $
&&
ÄÄ% '
	_cellPool
ÄÄ( 1
[
ÄÄ1 2
topMostCellIndex
ÄÄ2 B
]
ÄÄB C
.
ÄÄC D
MinY
ÄÄD H
(
ÄÄH I
)
ÄÄI J
<
ÄÄK L#
_recyclableViewBounds
ÄÄM b
.
ÄÄb c
max
ÄÄc f
.
ÄÄf g
y
ÄÄg h
)
ÄÄh i
{
ÅÅ 
return
ÆÆ  
RecycleBottomToTop
ÆÆ )
(
ÆÆ) *
)
ÆÆ* +
;
ÆÆ+ ,
}
ÇÇ 
return
ÉÉ 

zeroVector
ÉÉ 
;
ÉÉ 
}
ÊÊ 	
private
ÏÏ 
Vector2
ÏÏ  
RecycleTopToBottom
ÏÏ *
(
ÏÏ* +
)
ÏÏ+ ,
{
ÐÐ 	

_recycling
ÑÑ 
=
ÑÑ 
true
ÑÑ 
;
ÑÑ 
int
ÓÓ 
n
ÓÓ 
=
ÓÓ 
$num
ÓÓ 
;
ÓÓ 
float
ÔÔ 
posY
ÔÔ 
=
ÔÔ 
IsGrid
ÔÔ 
?
ÔÔ  !
	_cellPool
ÔÔ" +
[
ÔÔ+ ,!
bottomMostCellIndex
ÔÔ, ?
]
ÔÔ? @
.
ÔÔ@ A
anchoredPosition
ÔÔA Q
.
ÔÔQ R
y
ÔÔR S
:
ÔÔT U
$num
ÔÔV W
;
ÔÔW X
float
ÕÕ 
posX
ÕÕ 
=
ÕÕ 
$num
ÕÕ 
;
ÕÕ 
var
ÙÙ 
additionalRows
ÙÙ 
=
ÙÙ  
$num
ÙÙ! "
;
ÙÙ" #
while
ÚÚ 
(
ÚÚ 
	_cellPool
ÚÚ 
[
ÚÚ 
topMostCellIndex
ÚÚ -
]
ÚÚ- .
.
ÚÚ. /
MinY
ÚÚ/ 3
(
ÚÚ3 4
)
ÚÚ4 5
>
ÚÚ6 7#
_recyclableViewBounds
ÚÚ8 M
.
ÚÚM N
max
ÚÚN Q
.
ÚÚQ R
y
ÚÚR S
&&
ÚÚT V
currentItemCount
ÚÚW g
<
ÚÚh i
_dataSource
ÚÚj u
.
ÚÚu v
GetItemCountÚÚv 
(ÚÚ 
)ÚÚ 
)ÚÚ 
{
ÛÛ 
if
ÜÜ 
(
ÜÜ 
IsGrid
ÜÜ 
)
ÜÜ 
{
ÝÝ 
if
ÞÞ 
(
ÞÞ 
++
ÞÞ $
_bottomMostCellColoumn
ÞÞ 0
>=
ÞÞ1 3
	_coloumns
ÞÞ4 =
)
ÞÞ= >
{
ßß 
n
àà 
++
àà 
;
àà $
_bottomMostCellColoumn
áá .
=
áá/ 0
$num
áá1 2
;
áá2 3
posY
ââ 
=
ââ 
	_cellPool
ââ (
[
ââ( )!
bottomMostCellIndex
ââ) <
]
ââ< =
.
ââ= >
anchoredPosition
ââ> N
.
ââN O
y
ââO P
-
ââQ R
_cellHeight
ââS ^
;
ââ^ _
additionalRows
ãã &
++
ãã& (
;
ãã( )
}
ää 
posX
åå 
=
åå $
_bottomMostCellColoumn
åå 1
*
åå2 3

_cellWidth
åå4 >
;
åå> ?
	_cellPool
çç 
[
çç 
topMostCellIndex
çç .
]
çç. /
.
çç/ 0
anchoredPosition
çç0 @
=
ççA B
new
ççC F
Vector2
ççG N
(
ççN O
posX
ççO S
,
ççS T
posY
ççU Y
)
ççY Z
;
ççZ [
if
èè 
(
èè 
++
èè !
_topMostCellColoumn
èè -
>=
èè. 0
	_coloumns
èè1 :
)
èè: ;
{
éé !
_topMostCellColoumn
êê +
=
êê, -
$num
êê. /
;
êê/ 0
additionalRows
ëë &
--
ëë& (
;
ëë( )
}
ìì 
}
íí 
else
îî 
{
ïï 
posY
ññ 
=
ññ 
	_cellPool
ññ $
[
ññ$ %!
bottomMostCellIndex
ññ% 8
]
ññ8 9
.
ññ9 :
anchoredPosition
ññ: J
.
ññJ K
y
ññK L
-
ññM N
	_cellPool
ññO X
[
ññX Y!
bottomMostCellIndex
ññY l
]
ññl m
.
ññm n
	sizeDelta
ññn w
.
ññw x
y
ññx y
;
ññy z
	_cellPool
òò 
[
òò 
topMostCellIndex
òò .
]
òò. /
.
òò/ 0
anchoredPosition
òò0 @
=
òòA B
new
òòC F
Vector2
òòG N
(
òòN O
	_cellPool
òòO X
[
òòX Y
topMostCellIndex
òòY i
]
òòi j
.
òòj k
anchoredPosition
òòk {
.
òò{ |
x
òò| }
,
òò} ~
posYòò 
)òò 
;òò 
}
óó 
_dataSource
öö 
.
öö 
SetCell
öö #
(
öö# $
_cachedCells
öö$ 0
[
öö0 1
topMostCellIndex
öö1 A
]
ööA B
,
ööB C
currentItemCount
ööD T
)
ööT U
;
ööU V!
bottomMostCellIndex
ùù #
=
ùù$ %
topMostCellIndex
ùù& 6
;
ùù6 7
topMostCellIndex
úú  
=
úú! "
(
úú# $
topMostCellIndex
úú$ 4
+
úú5 6
$num
úú7 8
)
úú8 9
%
úú: ;
	_cellPool
úú< E
.
úúE F
Count
úúF K
;
úúK L
currentItemCount
üü  
++
üü  "
;
üü" #
if
ýý 
(
ýý 
!
ýý 
IsGrid
ýý 
)
ýý 
n
ýý 
++
ýý  
;
ýý  !
}
þþ 
if
 
(
 
IsGrid
 
)
 
{
 
Content
 
.
 
	sizeDelta
 !
+=
" $
additionalRows
% 3
*
4 5
Vector2
6 =
.
= >
up
> @
*
A B
_cellHeight
C N
;
N O
n
 
-=
 
additionalRows
 #
;
# $
}
 
	_cellPool
 
.
 
ForEach
 
(
 
(
 
RectTransform
 ,
cell
- 1
)
1 2
=>
3 5
cell
6 :
.
: ;
anchoredPosition
; K
+=
L N
n
O P
*
Q R
Vector2
S Z
.
Z [
up
[ ]
*
^ _
	_cellPool
` i
[
i j
topMostCellIndex
j z
]
z {
.
{ |
	sizeDelta| 
. 
y 
) 
; 
Content
 
.
 
anchoredPosition
 $
-=
% '
n
( )
*
* +
Vector2
, 3
.
3 4
up
4 6
*
7 8
	_cellPool
9 B
[
B C
topMostCellIndex
C S
]
S T
.
T U
	sizeDelta
U ^
.
^ _
y
_ `
;
` a

_recycling
 
=
 
false
 
;
 
return
 
-
 
new
 
Vector2
 
(
  
$num
  !
,
! "
n
# $
*
% &
	_cellPool
' 0
[
0 1
topMostCellIndex
1 A
]
A B
.
B C
	sizeDelta
C L
.
L M
y
M N
)
N O
;
O P
}
 	
private
 
Vector2
  
RecycleBottomToTop
 *
(
* +
)
+ ,
{
 	

_recycling
 
=
 
true
 
;
 
int
 
n
 
=
 
$num
 
;
 
float
 
posY
 
=
 
IsGrid
 
?
  !
	_cellPool
" +
[
+ ,
topMostCellIndex
, <
]
< =
.
= >
anchoredPosition
> N
.
N O
y
O P
:
Q R
$num
S T
;
T U
float
 
posX
 
=
 
$num
 
;
 
var
 
additionalRows
 
=
  
$num
! "
;
" #
while
 
(
 
	_cellPool
 
[
 !
bottomMostCellIndex
 0
]
0 1
.
1 2
MaxY
2 6
(
6 7
)
7 8
<
9 :#
_recyclableViewBounds
; P
.
P Q
min
Q T
.
T U
y
U V
&&
W Y
currentItemCount
Z j
>
k l
	_cellPool
m v
.
v w
Count
w |
)
| }
{
 
if
¡¡ 
(
¡¡ 
IsGrid
¡¡ 
)
¡¡ 
{
¢¢ 
if
££ 
(
££ 
--
££ !
_topMostCellColoumn
££ -
<
££. /
$num
££0 1
)
££1 2
{
¤¤ 
n
¥¥ 
++
¥¥ 
;
¥¥ !
_topMostCellColoumn
¦¦ +
=
¦¦, -
	_coloumns
¦¦. 7
-
¦¦8 9
$num
¦¦: ;
;
¦¦; <
posY
§§ 
=
§§ 
	_cellPool
§§ (
[
§§( )
topMostCellIndex
§§) 9
]
§§9 :
.
§§: ;
anchoredPosition
§§; K
.
§§K L
y
§§L M
+
§§N O
_cellHeight
§§P [
;
§§[ \
additionalRows
¨¨ &
++
¨¨& (
;
¨¨( )
}
©© 
posX
«« 
=
«« !
_topMostCellColoumn
«« .
*
««/ 0

_cellWidth
««1 ;
;
««; <
	_cellPool
­­ 
[
­­ !
bottomMostCellIndex
­­ 1
]
­­1 2
.
­­2 3
anchoredPosition
­­3 C
=
­­D E
new
­­F I
Vector2
­­J Q
(
­­Q R
posX
­­R V
,
­­V W
posY
­­X \
)
­­\ ]
;
­­] ^
if
®® 
(
®® 
--
®® $
_bottomMostCellColoumn
®® 0
<
®®1 2
$num
®®3 4
)
®®4 5
{
¯¯ $
_bottomMostCellColoumn
°° .
=
°°/ 0
	_coloumns
°°1 :
-
°°; <
$num
°°= >
;
°°> ?
additionalRows
±± &
--
±±& (
;
±±( )
}
²² 
}
³³ 
else
´´ 
{
µµ 
posY
·· 
=
·· 
	_cellPool
·· $
[
··$ %
topMostCellIndex
··% 5
]
··5 6
.
··6 7
anchoredPosition
··7 G
.
··G H
y
··H I
+
··J K
	_cellPool
··L U
[
··U V
topMostCellIndex
··V f
]
··f g
.
··g h
	sizeDelta
··h q
.
··q r
y
··r s
;
··s t
	_cellPool
¸¸ 
[
¸¸ !
bottomMostCellIndex
¸¸ 1
]
¸¸1 2
.
¸¸2 3
anchoredPosition
¸¸3 C
=
¸¸D E
new
¸¸F I
Vector2
¸¸J Q
(
¸¸Q R
	_cellPool
¸¸R [
[
¸¸[ \!
bottomMostCellIndex
¸¸\ o
]
¸¸o p
.
¸¸p q
anchoredPosition¸¸q 
.¸¸ 
x¸¸ 
,¸¸ 
posY¸¸ 
)¸¸ 
;¸¸ 
n
ºº 
++
ºº 
;
ºº 
}
»» 
currentItemCount
½½  
--
½½  "
;
½½" #
_dataSource
ÀÀ 
.
ÀÀ 
SetCell
ÀÀ #
(
ÀÀ# $
_cachedCells
ÀÀ$ 0
[
ÀÀ0 1!
bottomMostCellIndex
ÀÀ1 D
]
ÀÀD E
,
ÀÀE F
currentItemCount
ÀÀG W
-
ÀÀX Y
	_cellPool
ÀÀZ c
.
ÀÀc d
Count
ÀÀd i
)
ÀÀi j
;
ÀÀj k
topMostCellIndex
ÃÃ  
=
ÃÃ! "!
bottomMostCellIndex
ÃÃ# 6
;
ÃÃ6 7!
bottomMostCellIndex
ÄÄ #
=
ÄÄ$ %
(
ÄÄ& '!
bottomMostCellIndex
ÄÄ' :
-
ÄÄ; <
$num
ÄÄ= >
+
ÄÄ? @
	_cellPool
ÄÄA J
.
ÄÄJ K
Count
ÄÄK P
)
ÄÄP Q
%
ÄÄR S
	_cellPool
ÄÄT ]
.
ÄÄ] ^
Count
ÄÄ^ c
;
ÄÄc d
}
ÅÅ 
if
ÇÇ 
(
ÇÇ 
IsGrid
ÇÇ 
)
ÇÇ 
{
ÈÈ 
Content
ÉÉ 
.
ÉÉ 
	sizeDelta
ÉÉ !
+=
ÉÉ" $
additionalRows
ÉÉ% 3
*
ÉÉ4 5
Vector2
ÉÉ6 =
.
ÉÉ= >
up
ÉÉ> @
*
ÉÉA B
_cellHeight
ÉÉC N
;
ÉÉN O
if
ËË 
(
ËË 
additionalRows
ËË "
>
ËË# $
$num
ËË% &
)
ËË& '
{
ÌÌ 
n
ÍÍ 
-=
ÍÍ 
additionalRows
ÍÍ '
;
ÍÍ' (
}
ÎÎ 
}
ÏÏ 
	_cellPool
ÑÑ 
.
ÑÑ 
ForEach
ÑÑ 
(
ÑÑ 
(
ÑÑ 
RectTransform
ÑÑ ,
cell
ÑÑ- 1
)
ÑÑ1 2
=>
ÑÑ3 5
cell
ÑÑ6 :
.
ÑÑ: ;
anchoredPosition
ÑÑ; K
-=
ÑÑL N
n
ÑÑO P
*
ÑÑQ R
Vector2
ÑÑS Z
.
ÑÑZ [
up
ÑÑ[ ]
*
ÑÑ^ _
	_cellPool
ÑÑ` i
[
ÑÑi j
topMostCellIndex
ÑÑj z
]
ÑÑz {
.
ÑÑ{ |
	sizeDeltaÑÑ| 
.ÑÑ 
yÑÑ 
)ÑÑ 
;ÑÑ 
Content
ÒÒ 
.
ÒÒ 
anchoredPosition
ÒÒ $
+=
ÒÒ% '
n
ÒÒ( )
*
ÒÒ* +
Vector2
ÒÒ, 3
.
ÒÒ3 4
up
ÒÒ4 6
*
ÒÒ7 8
	_cellPool
ÒÒ9 B
[
ÒÒB C
topMostCellIndex
ÒÒC S
]
ÒÒS T
.
ÒÒT U
	sizeDelta
ÒÒU ^
.
ÒÒ^ _
y
ÒÒ_ `
;
ÒÒ` a

_recycling
ÓÓ 
=
ÓÓ 
false
ÓÓ 
;
ÓÓ 
return
ÔÔ 
new
ÔÔ 
Vector2
ÔÔ 
(
ÔÔ 
$num
ÔÔ  
,
ÔÔ  !
n
ÔÔ" #
*
ÔÔ$ %
	_cellPool
ÔÔ& /
[
ÔÔ/ 0
topMostCellIndex
ÔÔ0 @
]
ÔÔ@ A
.
ÔÔA B
	sizeDelta
ÔÔB K
.
ÔÔK L
y
ÔÔL M
)
ÔÔM N
;
ÔÔN O
}
ÕÕ 	
private
ÝÝ 
void
ÝÝ 
SetTopAnchor
ÝÝ !
(
ÝÝ! "
RectTransform
ÝÝ" /
rectTransform
ÝÝ0 =
)
ÝÝ= >
{
ÞÞ 	
float
àà 
width
àà 
=
àà 
rectTransform
àà '
.
àà' (
rect
àà( ,
.
àà, -
width
àà- 2
;
àà2 3
float
áá 
height
áá 
=
áá 
rectTransform
áá (
.
áá( )
rect
áá) -
.
áá- .
height
áá. 4
;
áá4 5
rectTransform
ää 
.
ää 
	anchorMin
ää #
=
ää$ %
new
ää& )
Vector2
ää* 1
(
ää1 2
$num
ää2 6
,
ää6 7
$num
ää8 9
)
ää9 :
;
ää: ;
rectTransform
åå 
.
åå 
	anchorMax
åå #
=
åå$ %
new
åå& )
Vector2
åå* 1
(
åå1 2
$num
åå2 6
,
åå6 7
$num
åå8 9
)
åå9 :
;
åå: ;
rectTransform
ææ 
.
ææ 
pivot
ææ 
=
ææ  !
new
ææ" %
Vector2
ææ& -
(
ææ- .
$num
ææ. 2
,
ææ2 3
$num
ææ4 5
)
ææ5 6
;
ææ6 7
rectTransform
éé 
.
éé 
	sizeDelta
éé #
=
éé$ %
new
éé& )
Vector2
éé* 1
(
éé1 2
width
éé2 7
,
éé7 8
height
éé9 ?
)
éé? @
;
éé@ A
}
êê 	
private
ìì 
void
ìì 
SetTopLeftAnchor
ìì %
(
ìì% &
RectTransform
ìì& 3
rectTransform
ìì4 A
)
ììA B
{
íí 	
float
ïï 
width
ïï 
=
ïï 
rectTransform
ïï '
.
ïï' (
rect
ïï( ,
.
ïï, -
width
ïï- 2
;
ïï2 3
float
ðð 
height
ðð 
=
ðð 
rectTransform
ðð (
.
ðð( )
rect
ðð) -
.
ðð- .
height
ðð. 4
;
ðð4 5
rectTransform
óó 
.
óó 
	anchorMin
óó #
=
óó$ %
new
óó& )
Vector2
óó* 1
(
óó1 2
$num
óó2 3
,
óó3 4
$num
óó5 6
)
óó6 7
;
óó7 8
rectTransform
ôô 
.
ôô 
	anchorMax
ôô #
=
ôô$ %
new
ôô& )
Vector2
ôô* 1
(
ôô1 2
$num
ôô2 3
,
ôô3 4
$num
ôô5 6
)
ôô6 7
;
ôô7 8
rectTransform
õõ 
.
õõ 
pivot
õõ 
=
õõ  !
new
õõ" %
Vector2
õõ& -
(
õõ- .
$num
õõ. /
,
õõ/ 0
$num
õõ1 2
)
õõ2 3
;
õõ3 4
rectTransform
øø 
.
øø 
	sizeDelta
øø #
=
øø$ %
new
øø& )
Vector2
øø* 1
(
øø1 2
width
øø2 7
,
øø7 8
height
øø9 ?
)
øø? @
;
øø@ A
}
ùù 	
public
ýý 
void
ýý 
OnDrawGizmos
ýý  
(
ýý  !
)
ýý! "
{
þþ 	
Gizmos
ÿÿ 
.
ÿÿ 
color
ÿÿ 
=
ÿÿ 
Color
ÿÿ  
.
ÿÿ  !
green
ÿÿ! &
;
ÿÿ& '
Gizmos
 
.
 
DrawLine
 
(
 #
_recyclableViewBounds
 1
.
1 2
min
2 5
-
6 7
new
8 ;
Vector3
< C
(
C D
$num
D H
,
H I
$num
J K
)
K L
,
L M#
_recyclableViewBounds
N c
.
c d
min
d g
+
h i
new
j m
Vector3
n u
(
u v
$num
v z
,
z {
$num
| }
)
} ~
)
~ 
; 
Gizmos
 
.
 
color
 
=
 
Color
  
.
  !
red
! $
;
$ %
Gizmos
 
.
 
DrawLine
 
(
 #
_recyclableViewBounds
 1
.
1 2
max
2 5
-
6 7
new
8 ;
Vector3
< C
(
C D
$num
D H
,
H I
$num
J K
)
K L
,
L M#
_recyclableViewBounds
N c
.
c d
max
d g
+
h i
new
j m
Vector3
n u
(
u v
$num
v z
,
z {
$num
| }
)
} ~
)
~ 
; 
}
 	
}
 
} 