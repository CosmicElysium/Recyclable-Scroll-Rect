¤
`D:\GitHub-Projects\Recyclable-Scroll-Rect\Assets\Recyclable Scroll Rect\Demo\Scripts\DemoCell.cs
public		 
class		 
DemoCell		 
:		 
MonoBehaviour		 %
,		% &
ICell		' ,
{

 
public 

Text 
	nameLabel 
; 
public 

Text 
genderLabel 
; 
public 

Text 
idLabel 
; 
private 
ContactInfo 
_contactInfo $
;$ %
private 
int 

_cellIndex 
; 
private 
void 
Start 
( 
) 
{ 
GetComponent 
< 
Button 
> 
( 
) 
. 
onClick &
.& '
AddListener' 2
(2 3
ButtonListener3 A
)A B
;B C
} 
public 

void 
ConfigureCell 
( 
ContactInfo )
contactInfo* 5
,5 6
int6 9
	cellIndex: C
)C D
{ 

_cellIndex 
= 
	cellIndex 
; 
_contactInfo 
= 
contactInfo "
;" #
	nameLabel   
.   
text   
=   
contactInfo   $
.  $ %
Name  % )
;  ) *
genderLabel!! 
.!! 
text!! 
=!! 
contactInfo!! &
.!!& '
Gender!!' -
;!!- .
idLabel"" 
."" 
text"" 
="" 
contactInfo"" "
.""" #
id""# %
;""% &
}## 
private&& 
void&& 
ButtonListener&& 
(&&  
)&&  !
{'' 
Debug(( 
.(( 
Log(( 
((( 
$str(( 
+(( 

_cellIndex(( )
+((* +
$str((- 8
+((9 :
_contactInfo((; G
.((G H
Name((H L
+((N O
$str((P ]
+((^ _
_contactInfo((` l
.((l m
Gender((m s
)((s t
;((t u
})) 
}** Ò
nD:\GitHub-Projects\Recyclable-Scroll-Rect\Assets\Recyclable Scroll Rect\Demo\Scripts\RecyclableScrollerDemo.cs
public 
struct 
ContactInfo 
{ 
public 

string 
Name 
; 
public 

string 
Gender 
; 
public 

string 
id 
; 
} 
public 
class "
RecyclableScrollerDemo #
:$ %
MonoBehaviour& 3
,3 4+
IRecyclableScrollRectDataSource5 T
{ 
[ 
SerializeField 
]  
RecyclableScrollRect !
_recyclableScrollRect .
;. /
[ 
SerializeField 
] 
private 
int 
_dataLength 
; 
private 
List 
< 
ContactInfo 
> 
_contactList *
=+ ,
new- 0
List1 5
<5 6
ContactInfo6 A
>A B
(B C
)C D
;D E
private 
void 
Awake 
( 
) 
{   
InitData!! 
(!! 
)!! 
;!! !
_recyclableScrollRect"" 
."" 

DataSource"" (
="") *
this""+ /
;""/ 0
}## 
private&& 
void&& 
InitData&& 
(&& 
)&& 
{'' 
if(( 

((( 
_contactList(( 
!=(( 
null((  
)((  !
_contactList((" .
.((. /
Clear((/ 4
(((4 5
)((5 6
;((6 7
string** 
[** 
]** 
genders** 
=** 
{** 
$str** #
,**# $
$str**% -
}**. /
;**/ 0
for++ 
(++ 
int++ 
i++ 
=++ 
$num++ 
;++ 
i++ 
<++ 
_dataLength++ '
;++' (
i++) *
++++* ,
)++, -
{,, 	
ContactInfo-- 
obj-- 
=-- 
new-- !
ContactInfo--" -
(--- .
)--. /
;--/ 0
obj.. 
... 
Name.. 
=.. 
i.. 
+.. 
$str.. "
;.." #
obj// 
.// 
Gender// 
=// 
genders//  
[//  !
Random//! '
.//' (
Range//( -
(//- .
$num//. /
,/// 0
$num//1 2
)//2 3
]//3 4
;//4 5
obj00 
.00 
id00 
=00 
$str00 
+00  
i00! "
;00" #
_contactList11 
.11 
Add11 
(11 
obj11  
)11  !
;11! "
}22 	
}33 
public:: 

int:: 
GetItemCount:: 
(:: 
):: 
{;; 
return<< 
_contactList<< 
.<< 
Count<< !
;<<! "
}== 
publicCC 

voidCC 
SetCellCC 
(CC 
ICellCC 
cellCC "
,CC" #
intCC$ '
indexCC( -
)CC- .
{DD 
varFF 
itemFF 
=FF 
cellFF 
asFF 
DemoCellFF #
;FF# $
itemGG 
.GG 
ConfigureCellGG 
(GG 
_contactListGG '
[GG' (
indexGG( -
]GG- .
,GG. /
indexGG/ 4
)GG4 5
;GG5 6
}HH 
}KK ÜV
rD:\GitHub-Projects\Recyclable-Scroll-Rect\Assets\Recyclable Scroll Rect\Main\Editor1\RecyclableScrollRectEditor.cs
	namespace 	
PolyAndCode
 
. 
UI 
{ 
[ 
CustomEditor 
( 
typeof 
(  
RecyclableScrollRect -
)- .
,. /
true0 4
)4 5
]5 6
[		 "
CanEditMultipleObjects		 
]		 
public 

class &
RecyclableScrollRectEditor +
:, -
Editor. 4
{ 
SerializedProperty 
	m_Content $
;$ %
SerializedProperty 
m_MovementType )
;) *
SerializedProperty 
m_Elasticity '
;' (
SerializedProperty 
	m_Inertia $
;$ %
SerializedProperty 
m_DecelerationRate -
;- .
SerializedProperty 
m_ScrollSensitivity .
;. /
SerializedProperty 

m_Viewport %
;% &
SerializedProperty 
m_OnValueChanged +
;+ ,
SerializedProperty 
_protoTypeCell )
;) *
SerializedProperty 
_selfInitialize *
;* +
SerializedProperty 

_direction %
;% &
SerializedProperty 
_type  
;  !
SerializedProperty 
	_segments $
;$ %
AnimBool   
m_ShowElasticity   !
;  ! "
AnimBool!! "
m_ShowDecelerationRate!! '
;!!' ( 
RecyclableScrollRect## 
_script## $
;##$ %
	protected$$ 
virtual$$ 
void$$ 
OnEnable$$ '
($$' (
)$$( )
{%% 	
_script&& 
=&& 
(&&  
RecyclableScrollRect&& +
)&&+ ,
target&&, 2
;&&2 3
	m_Content(( 
=(( 
serializedObject(( (
.((( )
FindProperty(() 5
(((5 6
$str((6 A
)((A B
;((B C
m_MovementType)) 
=)) 
serializedObject)) -
.))- .
FindProperty)). :
()): ;
$str)); K
)))K L
;))L M
m_Elasticity** 
=** 
serializedObject** +
.**+ ,
FindProperty**, 8
(**8 9
$str**9 G
)**G H
;**H I
	m_Inertia++ 
=++ 
serializedObject++ (
.++( )
FindProperty++) 5
(++5 6
$str++6 A
)++A B
;++B C
m_DecelerationRate,, 
=,,  
serializedObject,,! 1
.,,1 2
FindProperty,,2 >
(,,> ?
$str,,? S
),,S T
;,,T U
m_ScrollSensitivity-- 
=--  !
serializedObject--" 2
.--2 3
FindProperty--3 ?
(--? @
$str--@ U
)--U V
;--V W

m_Viewport.. 
=.. 
serializedObject.. )
...) *
FindProperty..* 6
(..6 7
$str..7 C
)..C D
;..D E
m_OnValueChanged// 
=// 
serializedObject// /
./// 0
FindProperty//0 <
(//< =
$str//= O
)//O P
;//P Q
_protoTypeCell22 
=22 
serializedObject22 -
.22- .
FindProperty22. :
(22: ;
$str22; J
)22J K
;22K L
_selfInitialize33 
=33 
serializedObject33 .
.33. /
FindProperty33/ ;
(33; <
$str33< L
)33L M
;33M N

_direction44 
=44 
serializedObject44 )
.44) *
FindProperty44* 6
(446 7
$str447 B
)44B C
;44C D
_type55 
=55 
serializedObject55 $
.55$ %
FindProperty55% 1
(551 2
$str552 8
)558 9
;559 :
	_segments66 
=66 
serializedObject66 (
.66( )
FindProperty66) 5
(665 6
$str666 A
)66A B
;66B C
m_ShowElasticity88 
=88 
new88 "
AnimBool88# +
(88+ ,
Repaint88, 3
)883 4
;884 5"
m_ShowDecelerationRate99 "
=99# $
new99% (
AnimBool99) 1
(991 2
Repaint992 9
)999 :
;99: ;
SetAnimBools:: 
(:: 
true:: 
):: 
;:: 
};; 	
	protected== 
virtual== 
void== 
	OnDisable== (
(==( )
)==) *
{>> 	
m_ShowElasticity?? 
.?? 
valueChanged?? )
.??) *
RemoveListener??* 8
(??8 9
Repaint??9 @
)??@ A
;??A B"
m_ShowDecelerationRate@@ "
.@@" #
valueChanged@@# /
.@@/ 0
RemoveListener@@0 >
(@@> ?
Repaint@@? F
)@@F G
;@@G H
}AA 	
voidCC 
SetAnimBoolsCC 
(CC 
boolCC 
instantCC &
)CC& '
{DD 	
SetAnimBoolEE 
(EE 
m_ShowElasticityEE (
,EE( )
!EE* +
m_MovementTypeEE+ 9
.EE9 :&
hasMultipleDifferentValuesEE: T
&&EEU W
m_MovementTypeEEX f
.EEf g
enumValueIndexEEg u
==EEv x
(EEy z
intEEz }
)EE} ~

ScrollRect	EE~ 
.
EE 
MovementType
EE 
.
EE 
Elastic
EE 
,
EE 
instant
EE ¦
)
EE¦ §
;
EE§ ¨
SetAnimBoolFF 
(FF "
m_ShowDecelerationRateFF .
,FF. /
!FF0 1
	m_InertiaFF1 :
.FF: ;&
hasMultipleDifferentValuesFF; U
&&FFV X
	m_InertiaFFY b
.FFb c
	boolValueFFc l
==FFm o
trueFFp t
,FFt u
instantFFv }
)FF} ~
;FF~ 
}GG 	
voidII 
SetAnimBoolII 
(II 
AnimBoolII !
aII" #
,II# $
boolII% )
valueII* /
,II/ 0
boolII1 5
instantII6 =
)II= >
{JJ 	
ifKK 
(KK 
instantKK 
)KK 
aLL 
.LL 
valueLL 
=LL 
valueLL 
;LL  
elseMM 
aNN 
.NN 
targetNN 
=NN 
valueNN  
;NN  !
}OO 	
publicQQ 
overrideQQ 
voidQQ 
OnInspectorGUIQQ +
(QQ+ ,
)QQ, -
{RR 	
SetAnimBoolsSS 
(SS 
falseSS 
)SS 
;SS  
serializedObjectTT 
.TT 
UpdateTT #
(TT# $
)TT$ %
;TT% &
EditorGUILayoutWW 
.WW 
PropertyFieldWW )
(WW) *

_directionWW* 4
)WW4 5
;WW5 6
EditorGUILayoutXX 
.XX 
PropertyFieldXX )
(XX) *
_typeXX* /
)XX/ 0
;XX0 1
ifYY 
(YY 
_typeYY 
.YY 
	boolValueYY 
)YY  
{ZZ 
string\\ 
title\\ 
=\\ 

_direction\\ )
.\\) *
enumValueIndex\\* 8
==\\9 ;
(\\< =
int\\= @
)\\@ A 
RecyclableScrollRect\\A U
.\\U V
DirectionType\\V c
.\\c d
Vertical\\d l
?\\m n
$str\\o y
:\\z {
$str	\\| 
;
\\ 
_script]] 
.]] 
Segments]] 
=]]  !
EditorGUILayout]]# 2
.]]2 3
IntField]]3 ;
(]]; <
title]]< A
,]]A B
_script]]C J
.]]J K
Segments]]K S
)]]S T
;]]T U
}^^ 
EditorGUILayout`` 
.`` 
PropertyField`` )
(``) *
_selfInitialize``* 9
)``9 :
;``: ;
EditorGUILayoutaa 
.aa 
PropertyFieldaa )
(aa) *

m_Viewportaa* 4
)aa4 5
;aa5 6
EditorGUILayoutbb 
.bb 
PropertyFieldbb )
(bb) *
	m_Contentbb* 3
)bb3 4
;bb4 5
EditorGUILayoutcc 
.cc 
PropertyFieldcc )
(cc) *
_protoTypeCellcc* 8
)cc8 9
;cc9 :
EditorGUILayoutdd 
.dd 
Spacedd !
(dd! "
)dd" #
;dd# $
EditorGUILayoutff 
.ff 
PropertyFieldff )
(ff) *
m_MovementTypeff* 8
)ff8 9
;ff9 :
ifgg 
(gg 
EditorGUILayoutgg 
.gg  
BeginFadeGroupgg  .
(gg. /
m_ShowElasticitygg/ ?
.gg? @
fadedgg@ E
)ggE F
)ggF G
{hh 
	EditorGUIii 
.ii 
indentLevelii %
++ii% '
;ii' (
EditorGUILayoutjj 
.jj  
PropertyFieldjj  -
(jj- .
m_Elasticityjj. :
)jj: ;
;jj; <
	EditorGUIkk 
.kk 
indentLevelkk %
--kk% '
;kk' (
}ll 
EditorGUILayoutmm 
.mm 
EndFadeGroupmm (
(mm( )
)mm) *
;mm* +
EditorGUILayoutoo 
.oo 
PropertyFieldoo )
(oo) *
	m_Inertiaoo* 3
)oo3 4
;oo4 5
ifpp 
(pp 
EditorGUILayoutpp 
.pp  
BeginFadeGrouppp  .
(pp. /"
m_ShowDecelerationRatepp/ E
.ppE F
fadedppF K
)ppK L
)ppL M
{qq 
	EditorGUIrr 
.rr 
indentLevelrr %
++rr% '
;rr' (
EditorGUILayoutss 
.ss  
PropertyFieldss  -
(ss- .
m_DecelerationRatess. @
)ss@ A
;ssA B
	EditorGUItt 
.tt 
indentLeveltt %
--tt% '
;tt' (
}uu 
EditorGUILayoutvv 
.vv 
EndFadeGroupvv (
(vv( )
)vv) *
;vv* +
EditorGUILayoutxx 
.xx 
PropertyFieldxx )
(xx) *
m_ScrollSensitivityxx* =
)xx= >
;xx> ?
EditorGUILayoutzz 
.zz 
Spacezz !
(zz! "
)zz" #
;zz# $
EditorGUILayout|| 
.|| 
PropertyField|| )
(||) *
m_OnValueChanged||* :
)||: ;
;||; <
serializedObject~~ 
.~~ #
ApplyModifiedProperties~~ 4
(~~4 5
)~~5 6
;~~6 7
} 	
}
 
} ­
vD:\GitHub-Projects\Recyclable-Scroll-Rect\Assets\Recyclable Scroll Rect\Main\Editor1\RecyclableScrollViewEditorTool.cs
	namespace 	
PolyAndCode
 
. 
UI 
{ 
[ 
ExecuteInEditMode 
] 
public 

static 
class *
RecyclableScrollViewEditorTool 6
{ 
const		 
string		 

PrefabPath		 
=		  !
$str		" k
;		k l
[ 	
MenuItem	 
( 
$str 8
)8 9
]9 :
private 
static 
void &
createRecyclableScrollView 6
(6 7
)7 8
{ 	

GameObject 
selected 
=  !
	Selection" +
.+ ,
activeGameObject, <
;< =
if 
( 
! 
selected 
|| 
selected %
.% &
	transform& /
./ 0
GetType0 7
(7 8
)8 9
!=: <
typeof= C
(C D
RectTransformD Q
)Q R
)R S
{ 
selected 
= 

GameObject %
.% &
FindObjectOfType& 6
<6 7
Canvas7 =
>= >
(> ?
)? @
.@ A

gameObjectA K
;K L
} 
if 
( 
! 
selected 
) 
return !
;! "

GameObject 
asset 
= 
AssetDatabase ,
., -
LoadAssetAtPath- <
(< =

PrefabPath= G
,G H
typeofI O
(O P

GameObjectP Z
)Z [
)[ \
as] _

GameObject` j
;j k

GameObject 
item 
= 
UnityEngine )
.) *
Object* 0
.0 1
Instantiate1 <
(< =
asset= B
)B C
asD F

GameObjectG Q
;Q R
item 
. 
name 
= 
$str 0
;0 1
item 
. 
	transform 
. 
	SetParent $
($ %
selected% -
.- .
	transform. 7
)7 8
;8 9
item 
. 
	transform 
. 
localPosition (
=) *
Vector3+ 2
.2 3
zero3 7
;7 8
	Selection 
. 
activeGameObject &
=' (
item) -
;- .
Undo   
.   %
RegisterCreatedObjectUndo   *
(  * +
item  + /
,  / 0
$str  1 Q
)  Q R
;  R S
}!! 	
}"" 
}## 
qD:\GitHub-Projects\Recyclable-Scroll-Rect\Assets\Recyclable Scroll Rect\Main\Scripts\HorizontalRecyclingSystem.cs
	namespace

 	
PolyAndCode


 
.

 
UI

 
{

 
public 

class %
HorizontalRecyclingSystem *
:+ ,
RecyclingSystem- <
{ 
private 
int 
_rows 
; 
private 
float 

_cellWidth  
,  !
_cellHeight" -
;- .
private 
int 
_leftMostCellRow $
,$ %
_RightMostCellRow& 7
,7 8
_currentRow9 D
;D E
private 
bool !
_contentSizeIncreased *
;* +
private +
IRecyclableScrollRectDataSource /
_dataSource0 ;
;; <
private 
List 
< 
RectTransform "
>" #
	_cellPool$ -
;- .
private 
List 
< 
ICell 
> 
_cachedCells (
;( )
private 
RectTransform 
_listContainer ,
;, -
private 
Bounds !
_recyclableViewBounds ,
;, -
private 
float 
_recyclingThreshold )
=* +
$num, /
;/ 0
private!! 
Vector3!! 
[!! 
]!! 
_corners!! "
=!!# $
new!!% (
Vector3!!) 0
[!!0 1
$num!!1 2
]!!2 3
;!!3 4
private"" 
bool"" 

_recycling"" 
;""  
private%% 
int%% 
leftMostCellIndex%% %
,%%% &
rightMostCellIndex%%' 9
;%%9 :
private&& 
int&& 
currentItemCount&& $
;&&$ %
public)) %
HorizontalRecyclingSystem)) (
())( )
RectTransform))) 6
prototypeCell))7 D
,))D E
RectTransform))F S
viewport))T \
,))\ ]
RectTransform))^ k
content))l s
,))s t,
IRecyclableScrollRectDataSource	))u 

dataSource
)) 
,
))  
bool
))¡ ¥
isGrid
))¦ ¬
,
))¬ ­
int
))® ±
rows
))² ¶
)
))¶ ·
{** 	
PrototypeCell++ 
=++ 
prototypeCell++ )
;++) *
Viewport,, 
=,, 
viewport,, 
;,,  
Content-- 
=-- 
content-- 
;-- 
_dataSource.. 
=.. 

dataSource.. $
;..$ %
IsGrid// 
=// 
isGrid// 
;// 
_rows00 
=00 
isGrid00 
?00 
rows00 !
:00" #
$num00$ %
;00% &
}11 	
public33 
override33 
IEnumerator33 #
InitCoroutine33$ 1
(331 2
Action332 8
onInitialized339 F
)33F G
{44 	
	SetAnchor66 
(66 
Content66 
)66 
;66 
Content77 
.77 
anchoredPosition77 $
=77% &
Vector377' .
.77. /
zero77/ 3
;773 4
yield88 
return88 
null88 
;88 
SetRecyclingBounds99 
(99 
)99  
;99  !
CreateCellPool<< 
(<< 
)<< 
;<< 
leftMostCellIndex== 
=== 
$num==  !
;==! "
rightMostCellIndex>> 
=>>  
	_cellPool>>! *
.>>* +
Count>>+ 0
->>1 2
$num>>3 4
;>>4 5
int@@ 
coloums@@ 
=@@ 
(@@ 
int@@ 
)@@ 
Mathf@@ $
.@@$ %
Ceil@@% )
(@@) *
(@@* +
float@@+ 0
)@@0 1
	_cellPool@@1 :
.@@: ;
Count@@; @
/@@A B
(@@C D
float@@D I
)@@I J
_rows@@J O
)@@O P
;@@P Q
floatCC 
contentXSizeCC 
=CC  
coloumsCC! (
*CC( )
PrototypeCellCC* 7
.CC7 8
	sizeDeltaCC8 A
.CCA B
xCCB C
;CCC D
ContentDD 
.DD 
	sizeDeltaDD 
=DD 
newDD  #
Vector2DD$ +
(DD+ ,
contentXSizeDD, 8
,DD8 9
ContentDD: A
.DDA B
	sizeDeltaDDB K
.DDK L
yDDL M
)DDM N
;DDN O
currentItemCountEE 
=EE 
	_cellPoolEE (
.EE( )
CountEE) .
;EE. /
	SetAnchorFF 
(FF 
ContentFF 
)FF 
;FF 
onInitializedGG 
(GG 
)GG 
;GG 
}HH 	
privateNN 
voidNN 
SetRecyclingBoundsNN '
(NN' (
)NN( )
{OO 	
ViewportPP 
.PP 
GetWorldCornersPP $
(PP$ %
_cornersPP% -
)PP- .
;PP. /
floatQQ 

threshHoldQQ 
=QQ 
_recyclingThresholdQQ 2
*QQ3 4
(QQ5 6
_cornersQQ6 >
[QQ> ?
$numQQ? @
]QQ@ A
.QQA B
xQQB C
-QQD E
_cornersQQF N
[QQN O
$numQQO P
]QQP Q
.QQQ R
xQQR S
)QQS T
;QQT U!
_recyclableViewBoundsRR !
.RR! "
minRR" %
=RR& '
newRR( +
Vector3RR, 3
(RR3 4
_cornersRR4 <
[RR< =
$numRR= >
]RR> ?
.RR? @
xRR@ A
-RRB C

threshHoldRRD N
,RRN O
_cornersRRP X
[RRX Y
$numRRY Z
]RRZ [
.RR[ \
yRR\ ]
)RR] ^
;RR^ _!
_recyclableViewBoundsSS !
.SS! "
maxSS" %
=SS& '
newSS( +
Vector3SS, 3
(SS3 4
_cornersSS4 <
[SS< =
$numSS= >
]SS> ?
.SS? @
xSS@ A
+SSB C

threshHoldSSD N
,SSN O
_cornersSSP X
[SSX Y
$numSSY Z
]SSZ [
.SS[ \
ySS\ ]
)SS] ^
;SS^ _
}TT 	
privateYY 
voidYY 
CreateCellPoolYY #
(YY# $
)YY$ %
{ZZ 	
if\\ 
(\\ 
	_cellPool\\ 
!=\\ 
null\\ !
)\\! "
{]] 
	_cellPool^^ 
.^^ 
ForEach^^ !
(^^! "
(^^" #
RectTransform^^# 0
item^^1 5
)^^5 6
=>^^7 9
UnityEngine^^: E
.^^E F
Object^^F L
.^^L M
Destroy^^M T
(^^T U
item^^U Y
.^^Y Z

gameObject^^Z d
)^^d e
)^^e f
;^^f g
	_cellPool__ 
.__ 
Clear__ 
(__  
)__  !
;__! "
_cachedCells`` 
.`` 
Clear`` "
(``" #
)``# $
;``$ %
}aa 
elsebb 
{cc 
_cachedCellsdd 
=dd 
newdd "
Listdd# '
<dd' (
ICelldd( -
>dd- .
(dd. /
)dd/ 0
;dd0 1
	_cellPoolee 
=ee 
newee 
Listee  $
<ee$ %
RectTransformee% 2
>ee2 3
(ee3 4
)ee4 5
;ee5 6
}ff 
PrototypeCellii 
.ii 

gameObjectii $
.ii$ %
	SetActiveii% .
(ii. /
trueii/ 3
)ii3 4
;ii4 5
	SetAnchorjj 
(jj 
PrototypeCelljj #
)jj# $
;jj$ %
floatmm 
currentPoolCoveragemm %
=mm& '
$nummm( )
;mm) *
intnn 
poolSizenn 
=nn 
$numnn 
;nn 
floatoo 
posXoo 
=oo 
$numoo 
;oo 
floatpp 
posYpp 
=pp 
$numpp 
;pp 
_cellHeightss 
=ss 
Contentss !
.ss! "
rectss" &
.ss& '
heightss' -
/ss. /
_rowsss0 5
;ss5 6

_cellWidthtt 
=tt 
PrototypeCelltt &
.tt& '
	sizeDeltatt' 0
.tt0 1
xtt1 2
/tt3 4
PrototypeCelltt5 B
.ttB C
	sizeDeltattC L
.ttL M
yttM N
*ttO P
_cellHeightttQ \
;tt\ ]
PrototypeCelluu 
.uu 
	sizeDeltauu #
=uu$ %
newuu& )
Vector3uu* 1
(uu1 2

_cellWidthuu2 <
,uu< =
_cellHeightuu> I
)uuI J
;uuJ K
_currentRowvv 
=vv 
_leftMostCellRowvv *
=vv+ ,
$numvv- .
;vv. /
floatzz 
requriedCoveragezz "
=zz# $
MinPoolCoveragezz% 4
*zz5 6
Viewportzz7 ?
.zz? @
rectzz@ D
.zzD E
widthzzE J
;zzJ K
int|| 
minPoolSize|| 
=|| 
Math|| "
.||" #
Min||# &
(||& '
MinPoolSize||' 2
,||2 3
_dataSource||4 ?
.||? @
GetItemCount||@ L
(||L M
)||M N
)||N O
;||O P
while~~ 
(~~ 
(~~ 
poolSize~~ 
<~~ 
minPoolSize~~ *
||~~+ -
currentPoolCoverage~~. A
<~~B C
requriedCoverage~~D T
)~~T U
&&~~V X
poolSize~~Y a
<~~b c
_dataSource~~d o
.~~o p
GetItemCount~~p |
(~~| }
)~~} ~
)~~~ 
{ 
RectTransform
 
item
 "
=
# $
(
% &
UnityEngine
& 1
.
1 2
Object
2 8
.
8 9
Instantiate
9 D
(
D E
PrototypeCell
E R
.
R S

gameObject
S ]
)
] ^
as
_ a

GameObject
b l
)
l m
.
m n
GetComponent
n z
<
z {
RectTransform{ 
> 
( 
) 
; 
item
 
.
 
name
 
=
 
$str
 "
;
" #
	_cellPool
 
.
 
Add
 
(
 
item
 "
)
" #
;
# $
item
 
.
 
	SetParent
 
(
 
Content
 &
,
& '
false
( -
)
- .
;
. /
if
 
(
 
IsGrid
 
)
 
{
 
item
 
.
 
anchoredPosition
 )
=
* +
new
, /
Vector2
0 7
(
7 8
posX
8 <
,
< =
posY
> B
)
B C
;
C D
_currentRow
 
++
 !
;
! "
posY
 
=
 
_currentRow
 &
>=
' )
_rows
* /
?
0 1
$num
2 3
:
4 5
posY
6 :
-
; <
_cellHeight
= H
;
H I
posX
 
=
 
_currentRow
 &
>=
' )
_rows
* /
?
0 1
posX
2 6
+
7 8

_cellWidth
9 C
:
D E
posX
F J
;
J K
if
 
(
 
_currentRow
 #
>=
$ &
_rows
' ,
)
, -
{
 
_currentRow
 #
=
$ %
$num
& '
;
' (!
currentPoolCoverage
 +
+=
, .
item
/ 3
.
3 4
rect
4 8
.
8 9
width
9 >
;
> ?
}
 
}
 
else
 
{
 
item
 
.
 
anchoredPosition
 )
=
* +
new
, /
Vector2
0 7
(
7 8
posX
8 <
,
< =
$num
> ?
)
? @
;
@ A
posX
 
=
 
item
 
.
  
anchoredPosition
  0
.
0 1
x
1 2
+
3 4
item
5 9
.
9 :
rect
: >
.
> ?
width
? D
;
D E!
currentPoolCoverage
 '
+=
( *
item
+ /
.
/ 0
rect
0 4
.
4 5
width
5 :
;
: ;
}
 
_cachedCells
 
.
 
Add
  
(
  !
item
! %
.
% &
GetComponent
& 2
<
2 3
ICell
3 8
>
8 9
(
9 :
)
: ;
)
; <
;
< =
_dataSource
 
.
 
SetCell
 #
(
# $
_cachedCells
$ 0
[
0 1
_cachedCells
1 =
.
= >
Count
> C
-
D E
$num
F G
]
G H
,
H I
poolSize
J R
)
R S
;
S T
poolSize
 
++
 
;
 
}
   
_leftMostCellRow
¢¢ 
=
¢¢ 
$num
¢¢  
;
¢¢  !
_RightMostCellRow
££ 
=
££ 
(
££  !
_currentRow
££! ,
-
££- .
$num
££/ 0
+
££1 2
_rows
££3 8
)
££8 9
%
££: ;
_rows
££< A
;
££A B
if
¦¦ 
(
¦¦ 
PrototypeCell
¦¦ 
.
¦¦ 

gameObject
¦¦ (
.
¦¦( )
scene
¦¦) .
.
¦¦. /
IsValid
¦¦/ 6
(
¦¦6 7
)
¦¦7 8
)
¦¦8 9
{
§§ 
PrototypeCell
¨¨ 
.
¨¨ 

gameObject
¨¨ (
.
¨¨( )
	SetActive
¨¨) 2
(
¨¨2 3
false
¨¨3 8
)
¨¨8 9
;
¨¨9 :
}
©© 
}
ªª 	
Vector2
¬¬ 

zeroVector
¬¬ 
=
¬¬ 
Vector2
¬¬ $
.
¬¬$ %
zero
¬¬% )
;
¬¬) *
public
­­ 
override
­­ 
Vector2
­­ $
OnValueChangedListener
­­  6
(
­­6 7
Vector2
­­7 >
args
­­? C
)
­­C D
{
®® 	
if
¯¯ 
(
¯¯ 

_recycling
¯¯ 
||
¯¯ 
	_cellPool
¯¯ '
==
¯¯( *
null
¯¯+ /
||
¯¯0 2
	_cellPool
¯¯3 <
.
¯¯< =
Count
¯¯= B
==
¯¯C E
$num
¯¯F G
)
¯¯G H
return
¯¯I O

zeroVector
¯¯P Z
;
¯¯Z [ 
SetRecyclingBounds
²² 
(
²² 
)
²²  
;
²²  !
if
´´ 
(
´´ 
	_cellPool
´´ 
[
´´  
rightMostCellIndex
´´ ,
]
´´, -
.
´´- .
MinX
´´. 2
(
´´2 3
)
´´3 4
<
´´5 6#
_recyclableViewBounds
´´7 L
.
´´L M
max
´´M P
.
´´P Q
x
´´Q R
)
´´R S
{
µµ 
return
··  
RecycleLeftToRight
·· (
(
··( )
)
··) *
;
··* +
}
¸¸ 
else
¹¹ 
if
¹¹ 
(
¹¹ 
	_cellPool
¹¹ 
[
¹¹ 
leftMostCellIndex
¹¹ 0
]
¹¹0 1
.
¹¹1 2
MaxX
¹¹2 6
(
¹¹6 7
)
¹¹7 8
>
¹¹9 :#
_recyclableViewBounds
¹¹; P
.
¹¹P Q
min
¹¹Q T
.
¹¹T U
x
¹¹U V
)
¹¹V W
{
ºº 
return
¼¼  
RecycleRightToleft
¼¼ (
(
¼¼( )
)
¼¼) *
;
¼¼* +
}
½½ 
return
¿¿ 

zeroVector
¿¿ 
;
¿¿ 
}
ÀÀ 	
private
ÅÅ 
Vector2
ÅÅ  
RecycleLeftToRight
ÅÅ *
(
ÅÅ* +
)
ÅÅ+ ,
{
ÆÆ 	

_recycling
ÇÇ 
=
ÇÇ 
true
ÇÇ 
;
ÇÇ 
int
ÉÉ 
n
ÉÉ 
=
ÉÉ 
$num
ÉÉ 
;
ÉÉ 
float
ÊÊ 
posX
ÊÊ 
=
ÊÊ 
$num
ÊÊ 
;
ÊÊ 
float
ËË 
posY
ËË 
=
ËË 
$num
ËË 
;
ËË 
if
ÍÍ 
(
ÍÍ 
IsGrid
ÍÍ 
)
ÍÍ 
{
ÎÎ 
posX
ÏÏ 
=
ÏÏ 
	_cellPool
ÏÏ  
[
ÏÏ  ! 
rightMostCellIndex
ÏÏ! 3
]
ÏÏ3 4
.
ÏÏ4 5
anchoredPosition
ÏÏ5 E
.
ÏÏE F
x
ÏÏF G
;
ÏÏG H
if
ÑÑ 
(
ÑÑ 
_RightMostCellRow
ÑÑ %
==
ÑÑ& (
_rows
ÑÑ) .
-
ÑÑ/ 0
$num
ÑÑ1 2
)
ÑÑ2 3
{
ÒÒ 
posX
ÓÓ 
+=
ÓÓ 

_cellWidth
ÓÓ &
;
ÓÓ& '
}
ÔÔ 
_currentRow
ÖÖ 
=
ÖÖ 
_RightMostCellRow
ÖÖ /
;
ÖÖ/ 0
}
×× 
while
ÙÙ 
(
ÙÙ 
	_cellPool
ÙÙ 
[
ÙÙ 
leftMostCellIndex
ÙÙ .
]
ÙÙ. /
.
ÙÙ/ 0
MaxX
ÙÙ0 4
(
ÙÙ4 5
)
ÙÙ5 6
<
ÙÙ7 8#
_recyclableViewBounds
ÙÙ9 N
.
ÙÙN O
min
ÙÙO R
.
ÙÙR S
x
ÙÙS T
&&
ÙÙU W
currentItemCount
ÙÙX h
<
ÙÙi j
_dataSource
ÙÙk v
.
ÙÙv w
GetItemCountÙÙw 
(ÙÙ 
)ÙÙ 
)ÙÙ 
{
ÚÚ 
if
ÛÛ 
(
ÛÛ 
IsGrid
ÛÛ 
)
ÛÛ 
{
ÜÜ 
_currentRow
ÝÝ 
++
ÝÝ !
;
ÝÝ! "
if
ßß 
(
ßß 
_currentRow
ßß "
>=
ßß# %
_rows
ßß& +
)
ßß+ ,
{
àà 
n
áá 
++
áá 
;
áá 
_currentRow
ââ #
=
ââ$ %
$num
ââ& '
;
ââ' (
}
ãã 
posY
ää 
=
ää 
-
ää 
_currentRow
ää '
*
ää( )
_cellHeight
ää* 5
;
ää5 6
if
ææ 
(
ææ 
_currentRow
ææ #
==
ææ$ &
$num
ææ' (
)
ææ( )
{
çç 
posX
éé 
=
éé 
	_cellPool
éé (
[
éé( ) 
rightMostCellIndex
éé) ;
]
éé; <
.
éé< =
anchoredPosition
éé= M
.
ééM N
x
ééN O
+
ééP Q

_cellWidth
ééR \
;
éé\ ]
}
êê 
	_cellPool
ìì 
[
ìì 
leftMostCellIndex
ìì /
]
ìì/ 0
.
ìì0 1
anchoredPosition
ìì1 A
=
ììB C
new
ììD G
Vector2
ììH O
(
ììO P
posX
ììP T
,
ììT U
posY
ììV Z
)
ììZ [
;
ìì[ \
_leftMostCellRow
îî $
=
îî% &
(
îî' (
_leftMostCellRow
îî( 8
+
îî9 :
$num
îî; <
)
îî< =
%
îî> ?
_rows
îî@ E
;
îîE F
}
ðð 
else
ññ 
{
ññ 
posX
òò 
=
òò 
	_cellPool
òò $
[
òò$ % 
rightMostCellIndex
òò% 7
]
òò7 8
.
òò8 9
anchoredPosition
òò9 I
.
òòI J
x
òòJ K
+
òòL M
	_cellPool
òòN W
[
òòW X 
rightMostCellIndex
òòX j
]
òòj k
.
òòk l
	sizeDelta
òòl u
.
òòu v
x
òòv w
;
òòw x
	_cellPool
óó 
[
óó 
leftMostCellIndex
óó /
]
óó/ 0
.
óó0 1
anchoredPosition
óó1 A
=
óóB C
new
óóD G
Vector2
óóH O
(
óóO P
posX
óóP T
,
óóT U
	_cellPool
óóV _
[
óó_ `
leftMostCellIndex
óó` q
]
óóq r
.
óór s
anchoredPositionóós 
.óó 
yóó 
)óó 
;óó 
}
ôô 
_dataSource
÷÷ 
.
÷÷ 
SetCell
÷÷ #
(
÷÷# $
_cachedCells
÷÷$ 0
[
÷÷0 1
leftMostCellIndex
÷÷1 B
]
÷÷B C
,
÷÷C D
currentItemCount
÷÷E U
)
÷÷U V
;
÷÷V W 
rightMostCellIndex
úú "
=
úú# $
leftMostCellIndex
úú% 6
;
úú6 7
leftMostCellIndex
ûû !
=
ûû" #
(
ûû$ %
leftMostCellIndex
ûû% 6
+
ûû7 8
$num
ûû9 :
)
ûû: ;
%
ûû< =
	_cellPool
ûû> G
.
ûûG H
Count
ûûH M
;
ûûM N
currentItemCount
ýý  
++
ýý  "
;
ýý" #
if
þþ 
(
þþ 
!
þþ 
IsGrid
þþ 
)
þþ 
n
þþ 
++
þþ  
;
þþ  !
}
ÿÿ 
if
 
(
 
IsGrid
 
)
 
{
 
_RightMostCellRow
 !
=
" #
_currentRow
$ /
;
/ 0
if
 
(
 
!
 #
_contentSizeIncreased
 *
)
* +
{
 
if
 
(
 
_currentRow
 #
!=
$ &
_rows
' ,
-
- .
$num
/ 0
)
0 1
{
 
Content
 
.
  
	sizeDelta
  )
+=
* ,
Vector2
- 4
.
4 5
right
5 :
*
; <

_cellWidth
= G
;
G H
n
 
-=
 
$num
 
;
 #
_contentSizeIncreased
 -
=
. /
true
0 4
;
4 5
}
 
}
 
else
 
{
 
if
 
(
 
_currentRow
 #
==
$ &
_rows
' ,
-
- .
$num
/ 0
)
0 1
{
 
Content
 
.
  
	sizeDelta
  )
-=
* ,
Vector2
- 4
.
4 5
right
5 :
*
; <

_cellWidth
= G
;
G H#
_contentSizeIncreased
 -
=
. /
false
0 5
;
5 6
}
 
}
 
}
 
	_cellPool
   
.
   
ForEach
   
(
   
(
   
RectTransform
   ,
cell
  - 1
)
  1 2
=>
  3 5
cell
  6 :
.
  : ;
anchoredPosition
  ; K
-=
  L N
n
  O P
*
  Q R
Vector2
  S Z
.
  Z [
right
  [ `
*
  a b
	_cellPool
  c l
[
  l m
leftMostCellIndex
  m ~
]
  ~ 
.   
	sizeDelta   
.   
x   
)   
;   
Content
¡¡ 
.
¡¡ 
anchoredPosition
¡¡ $
+=
¡¡% '
n
¡¡( )
*
¡¡* +
Vector2
¡¡, 3
.
¡¡3 4
right
¡¡4 9
*
¡¡: ;
	_cellPool
¡¡< E
[
¡¡E F
leftMostCellIndex
¡¡F W
]
¡¡W X
.
¡¡X Y
	sizeDelta
¡¡Y b
.
¡¡b c
x
¡¡c d
;
¡¡d e

_recycling
¢¢ 
=
¢¢ 
false
¢¢ 
;
¢¢ 
return
££ 
n
££ 
*
££ 
Vector2
££ 
.
££  
right
££  %
*
££& '
	_cellPool
££( 1
[
££1 2
leftMostCellIndex
££2 C
]
££C D
.
££D E
	sizeDelta
££E N
.
££N O
x
££O P
;
££P Q
}
ÃÃ 	
private
ÈÈ 
Vector2
ÈÈ  
RecycleRightToleft
ÈÈ *
(
ÈÈ* +
)
ÈÈ+ ,
{
ÉÉ 	

_recycling
ÊÊ 
=
ÊÊ 
true
ÊÊ 
;
ÊÊ 
int
ÌÌ 
n
ÌÌ 
=
ÌÌ 
$num
ÌÌ 
;
ÌÌ 
float
ÍÍ 
posX
ÍÍ 
=
ÍÍ 
$num
ÍÍ 
;
ÍÍ 
float
ÏÏ 
posY
ÏÏ 
=
ÏÏ 
$num
ÏÏ 
;
ÏÏ 
if
ÑÑ 
(
ÑÑ 
IsGrid
ÑÑ 
)
ÑÑ 
{
ÒÒ 
float
ÓÓ 
_posX
ÓÓ 
=
ÓÓ 
	_cellPool
ÓÓ '
[
ÓÓ' (
leftMostCellIndex
ÓÓ( 9
]
ÓÓ9 :
.
ÓÓ: ;
anchoredPosition
ÓÓ; K
.
ÓÓK L
x
ÓÓL M
-
ÓÓN O

_cellWidth
ÓÓP Z
;
ÓÓZ [
if
ÕÕ 
(
ÕÕ 
_leftMostCellRow
ÕÕ $
==
ÕÕ% '
$num
ÕÕ( )
)
ÕÕ) *
{
ÖÖ 
_posX
×× 
-=
×× 

_cellWidth
×× '
;
××' (
}
ØØ 
_currentRow
ÚÚ 
=
ÚÚ 
_leftMostCellRow
ÚÚ .
;
ÚÚ. /
}
ÛÛ 
while
ÜÜ 
(
ÜÜ 
	_cellPool
ÜÜ 
[
ÜÜ  
rightMostCellIndex
ÜÜ /
]
ÜÜ/ 0
.
ÜÜ0 1
MinX
ÜÜ1 5
(
ÜÜ5 6
)
ÜÜ6 7
>
ÜÜ8 9#
_recyclableViewBounds
ÜÜ: O
.
ÜÜO P
max
ÜÜP S
.
ÜÜS T
x
ÜÜT U
&&
ÜÜV X
currentItemCount
ÜÜY i
>
ÜÜj k
	_cellPool
ÜÜl u
.
ÜÜu v
Count
ÜÜv {
)
ÜÜ{ |
{
ÝÝ 
if
ÞÞ 
(
ÞÞ 
IsGrid
ÞÞ 
)
ÞÞ 
{
ßß 
_currentRow
àà 
--
àà  "
;
àà" #
if
ââ 
(
ââ 
_currentRow
ââ #
<
ââ$ %
$num
ââ& '
)
ââ' (
{
ãã 
n
ää 
++
ää 
;
ää 
_currentRow
åå #
=
åå$ %
_rows
åå& +
-
åå, -
$num
åå. /
;
åå/ 0
}
ææ 
posY
çç 
=
çç 
-
çç 
_currentRow
çç '
*
çç( )
_cellHeight
çç* 5
;
çç5 6
if
éé 
(
éé 
_currentRow
éé #
==
éé$ &
_rows
éé' ,
-
éé- .
$num
éé/ 0
)
éé0 1
{
êê 
posX
ìì 
=
ìì 
	_cellPool
ìì (
[
ìì( )
leftMostCellIndex
ìì) :
]
ìì: ;
.
ìì; <
anchoredPosition
ìì< L
.
ììL M
x
ììM N
-
ììO P

_cellWidth
ììQ [
;
ìì[ \
}
íí 
	_cellPool
ïï 
[
ïï  
rightMostCellIndex
ïï 0
]
ïï0 1
.
ïï1 2
anchoredPosition
ïï2 B
=
ïïC D
new
ïïE H
Vector2
ïïI P
(
ïïP Q
posX
ïïQ U
,
ïïU V
posY
ïïW [
)
ïï[ \
;
ïï\ ]
_leftMostCellRow
ññ $
=
ññ% &
(
ññ' (
_leftMostCellRow
ññ( 8
-
ññ9 :
$num
ññ; <
+
ññ= >
_rows
ññ? D
)
ññD E
%
ññF G
_rows
ññH M
;
ññM N
}
óó 
else
ôô 
{
õõ 
posX
÷÷ 
=
÷÷ 
	_cellPool
÷÷ $
[
÷÷$ %
leftMostCellIndex
÷÷% 6
]
÷÷6 7
.
÷÷7 8
anchoredPosition
÷÷8 H
.
÷÷H I
x
÷÷I J
-
÷÷K L
	_cellPool
÷÷M V
[
÷÷V W
leftMostCellIndex
÷÷W h
]
÷÷h i
.
÷÷i j
	sizeDelta
÷÷j s
.
÷÷s t
x
÷÷t u
;
÷÷u v
	_cellPool
øø 
[
øø  
rightMostCellIndex
øø 0
]
øø0 1
.
øø1 2
anchoredPosition
øø2 B
=
øøC D
new
øøE H
Vector2
øøI P
(
øøP Q
posX
øøQ U
,
øøU V
	_cellPool
øøW `
[
øø` a 
rightMostCellIndex
øøa s
]
øøs t
.
øøt u
anchoredPositionøøu 
.øø 
yøø 
)øø 
;øø 
n
ùù 
++
ùù 
;
ùù 
}
úú 
currentItemCount
üü  
--
üü  "
;
üü" #
_dataSource
þþ 
.
þþ 
SetCell
þþ #
(
þþ# $
_cachedCells
þþ$ 0
[
þþ0 1 
rightMostCellIndex
þþ1 C
]
þþC D
,
þþD E
currentItemCount
þþF V
-
þþW X
	_cellPool
þþY b
.
þþb c
Count
þþc h
)
þþh i
;
þþi j
leftMostCellIndex
 !
=
" # 
rightMostCellIndex
$ 6
;
6 7 
rightMostCellIndex
 "
=
# $
(
% & 
rightMostCellIndex
& 8
-
9 :
$num
; <
+
= >
	_cellPool
? H
.
H I
Count
I N
)
N O
%
P Q
	_cellPool
R [
.
[ \
Count
\ a
;
a b
}
 
if
 
(
 
IsGrid
 
)
 
{
 
_leftMostCellRow
  
=
! "
_currentRow
# .
;
. /
if
 
(
 
!
 #
_contentSizeIncreased
 *
)
* +
{
 
if
 
(
 
_currentRow
 #
!=
$ &
$num
' (
)
( )
{
 
Content
 
.
  
	sizeDelta
  )
+=
* ,
Vector2
- 4
.
4 5
right
5 :
*
; <

_cellWidth
= G
;
G H
n
 
-=
 
$num
 
;
 #
_contentSizeIncreased
 -
=
. /
true
0 4
;
4 5
}
 
}
 
else
 
{
 
if
 
(
 
_currentRow
 #
==
$ &
$num
' (
)
( )
{
 
Content
 
.
  
	sizeDelta
  )
-=
* ,
Vector2
- 4
.
4 5
right
5 :
*
; <

_cellWidth
= G
;
G H#
_contentSizeIncreased
 -
=
. /
false
0 5
;
5 6
}
 
}
 
}
 
	_cellPool
££ 
.
££ 
ForEach
££ 
(
££ 
(
££ 
RectTransform
££ ,
cell
££- 1
)
££1 2
=>
££3 5
cell
££6 :
.
££: ;
anchoredPosition
££; K
+=
££L N
n
££O P
*
££Q R
Vector2
££S Z
.
££Z [
right
££[ `
*
££a b
	_cellPool
££c l
[
££l m
leftMostCellIndex
££m ~
]
££~ 
.££ 
	sizeDelta££ 
.££ 
x££ 
)££ 
;££ 
Content
¤¤ 
.
¤¤ 
anchoredPosition
¤¤ $
-=
¤¤% '
n
¤¤( )
*
¤¤* +
Vector2
¤¤, 3
.
¤¤3 4
right
¤¤4 9
*
¤¤: ;
	_cellPool
¤¤< E
[
¤¤E F
leftMostCellIndex
¤¤F W
]
¤¤W X
.
¤¤X Y
	sizeDelta
¤¤Y b
.
¤¤b c
x
¤¤c d
;
¤¤d e

_recycling
¥¥ 
=
¥¥ 
false
¥¥ 
;
¥¥ 
return
¦¦ 
-
¦¦ 
n
¦¦ 
*
¦¦ 
Vector2
¦¦ 
.
¦¦  
right
¦¦  %
*
¦¦& '
	_cellPool
¦¦( 1
[
¦¦1 2
leftMostCellIndex
¦¦2 C
]
¦¦C D
.
¦¦D E
	sizeDelta
¦¦E N
.
¦¦N O
x
¦¦O P
;
¦¦P Q
}
ÆÆ 	
private
ÎÎ 
void
ÎÎ 
	SetAnchor
ÎÎ 
(
ÎÎ 
RectTransform
ÎÎ ,
rectTransform
ÎÎ- :
)
ÎÎ: ;
{
ÏÏ 	
float
ÑÑ 
width
ÑÑ 
=
ÑÑ 
rectTransform
ÑÑ '
.
ÑÑ' (
rect
ÑÑ( ,
.
ÑÑ, -
width
ÑÑ- 2
;
ÑÑ2 3
float
ÒÒ 
height
ÒÒ 
=
ÒÒ 
rectTransform
ÒÒ (
.
ÒÒ( )
rect
ÒÒ) -
.
ÒÒ- .
height
ÒÒ. 4
;
ÒÒ4 5
Vector2
ÔÔ 
pos
ÔÔ 
=
ÔÔ 
IsGrid
ÔÔ  
?
ÔÔ! "
new
ÔÔ# &
Vector2
ÔÔ' .
(
ÔÔ. /
$num
ÔÔ/ 0
,
ÔÔ0 1
$num
ÔÔ2 3
)
ÔÔ3 4
:
ÔÔ5 6
new
ÔÔ7 :
Vector2
ÔÔ; B
(
ÔÔB C
$num
ÔÔC D
,
ÔÔD E
$num
ÔÔF J
)
ÔÔJ K
;
ÔÔK L
rectTransform
×× 
.
×× 
	anchorMin
×× #
=
××$ %
pos
××& )
;
××) *
rectTransform
ØØ 
.
ØØ 
	anchorMax
ØØ #
=
ØØ$ %
pos
ØØ& )
;
ØØ) *
rectTransform
ÙÙ 
.
ÙÙ 
pivot
ÙÙ 
=
ÙÙ  !
pos
ÙÙ" %
;
ÙÙ% &
rectTransform
ÝÝ 
.
ÝÝ 
	sizeDelta
ÝÝ #
=
ÝÝ$ %
new
ÝÝ& )
Vector2
ÝÝ* 1
(
ÝÝ1 2
width
ÝÝ2 7
,
ÝÝ7 8
height
ÝÝ9 ?
)
ÝÝ? @
;
ÝÝ@ A
}
ÞÞ 	
}
áá 
}ææ ¢
]D:\GitHub-Projects\Recyclable-Scroll-Rect\Assets\Recyclable Scroll Rect\Main\Scripts\ICell.cs
	namespace		 	
PolyAndCode		
 
.		 
UI		 
{

 
public 

	interface 
ICell 
{ 
} 
} Ú
wD:\GitHub-Projects\Recyclable-Scroll-Rect\Assets\Recyclable Scroll Rect\Main\Scripts\IRecyclableScrollRectDataSource.cs
	namespace		 	
PolyAndCode		
 
.		 
UI		 
{

 
public 

	interface +
IRecyclableScrollRectDataSource 4
{ 
int 
GetItemCount 
( 
) 
; 
void 
SetCell 
( 
ICell 
cell 
,  
int! $
index% *
)* +
;+ ,
} 
} ã+
lD:\GitHub-Projects\Recyclable-Scroll-Rect\Assets\Recyclable Scroll Rect\Main\Scripts\RecyclableScrollRect.cs
	namespace 	
PolyAndCode
 
. 
UI 
{ 
public 

class  
RecyclableScrollRect %
:& '

ScrollRect( 2
{ 
public 
bool 
Grid 
; 
public 
enum 
DirectionType !
{ 	
Vertical 
, 

Horizontal 
} 	
public 
DirectionType 
	Direction &
;& '
[ 	
SerializeField	 
] 
public 
int 
Segments 
{ 
set 
{ 
	_segments 
= 
Math  
.  !
Max! $
($ %
value% *
,* +
$num, -
)- .
;. /
}   
get!! 
{!! 
return"" 
	_segments""  
;""  !
}## 
}$$ 	
[&& 	
SerializeField&&	 
]&& 
private'' 
int'' 
	_segments'' 
;'' 
public(( 
RectTransform(( 
PrototypeCell(( *
;((* +
public)) 
bool)) 
SelfInitialize)) "
=))# $
true))% )
;))) *
[++ 	
HideInInspector++	 
]++ 
public,, +
IRecyclableScrollRectDataSource,, .

DataSource,,/ 9
;,,9 :
private.. 
RecyclingSystem..  
recyclableScrollRect..  4
;..4 5
	protected00 
override00 
void00 
Start00  %
(00% &
)00& '
{11 	
vertical44 
=44 
false44 
;44 

horizontal55 
=55 
true55 
;55 
if77 
(77 
!77 
Application77 
.77 
	isPlaying77 &
)77& '
return77( .
;77. /
if99 
(99 
SelfInitialize99 
)99 

Initialize99  *
(99* +
)99+ ,
;99, -
}:: 	
private== 
void== 

Initialize== 
(==  
)==  !
{>> 	
if?? 
(?? 
	Direction?? 
==?? 
DirectionType?? *
.??* +
Vertical??+ 3
)??3 4
{@@  
recyclableScrollRectAA $
=AA% &
newAA' *#
VerticalRecyclingSystemAA+ B
(AAB C
PrototypeCellAAC P
,AAP Q
viewportAAR Z
,AAZ [
contentAA\ c
,AAc d

DataSourceAAe o
,AAo p
GridAAq u
,AAu v
SegmentsAAw 
)	AA 
;
AA 
}BB 
elseCC 
ifCC 
(CC 
	DirectionCC 
==CC !
DirectionTypeCC" /
.CC/ 0

HorizontalCC0 :
)CC: ;
{DD  
recyclableScrollRectEE $
=EE% &
newEE' *%
HorizontalRecyclingSystemEE+ D
(EED E
PrototypeCellEEE R
,EER S
viewportEET \
,EE\ ]
contentEE^ e
,EEe f

DataSourceEEg q
,EEq r
GridEEs w
,EEw x
Segments	EEy 
)
EE 
;
EE 
}FF 
verticalHH 
=HH 
	DirectionHH  
==HH! #
DirectionTypeHH$ 1
.HH1 2
VerticalHH2 :
;HH: ;

horizontalII 
=II 
	DirectionII "
==II# %
DirectionTypeII& 3
.II3 4

HorizontalII4 >
;II> ?
onValueChangedKK 
.KK 
RemoveListenerKK )
(KK) *"
OnValueChangedListenerKK* @
)KK@ A
;KKA B
StartCoroutineNN 
(NN  
recyclableScrollRectNN /
.NN/ 0
InitCoroutineNN0 =
(NN= >
(NN> ?
)NN? @
=>NNA C
onValueChangedOO? M
.OOM N
AddListenerOON Y
(OOY Z"
OnValueChangedListenerOOZ p
)OOp q
)PP> ?
)PP? @
;PP@ A
}SS 	
publicUU 
voidUU 

InitializeUU 
(UU +
IRecyclableScrollRectDataSourceUU >

dataSourceUU? I
)UUI J
{VV 	

DataSourceWW 
=WW 

dataSourceWW #
;WW# $

InitializeXX 
(XX 
)XX 
;XX 
}YY 	
public\\ 
void\\ "
OnValueChangedListener\\ *
(\\* +
Vector2\\+ 2
args\\3 7
)\\7 8
{]] 	"
m_ContentStartPosition^^ "
+=^^# % 
recyclableScrollRect^^& :
.^^: ;"
OnValueChangedListener^^; Q
(^^Q R
args^^R V
)^^V W
;^^W X
}__ 	
privatebb 
voidbb 
OnDrawGizmosbb !
(bb! "
)bb" #
{cc 	
ifdd 
(dd  
recyclableScrollRectdd $
isdd% '#
VerticalRecyclingSystemdd( ?
)dd? @
{ee 
(ff 
(ff #
VerticalRecyclingSystemff )
)ff) * 
recyclableScrollRectff* >
)ff> ?
.ff? @
OnDrawGizmosff@ L
(ffL M
)ffM N
;ffN O
}gg 
}ii 	
}ll 
}mm ç	
gD:\GitHub-Projects\Recyclable-Scroll-Rect\Assets\Recyclable Scroll Rect\Main\Scripts\RecyclingSystem.cs
	namespace 	
PolyAndCode
 
. 
UI 
{ 
public 

abstract 
class 
RecyclingSystem )
{		 
	protected

 
RectTransform

 
Viewport

  (
,

( )
Content

* 1
;

1 2
	protected 
bool 
IsGrid 
; 
	protected 
RectTransform 
PrototypeCell  -
;- .
	protected 
float 
MinPoolCoverage '
=( )
$num* .
;. /
	protected 
int 
MinPoolSize !
=" #
$num$ &
;& '
public 
abstract 
IEnumerator #
InitCoroutine$ 1
(1 2
System2 8
.8 9
Action9 ?
onInitialized@ M
)M N
;N O
public 
abstract 
Vector2 "
OnValueChangedListener  6
(6 7
Vector27 >
args? C
)C D
;D E
} 
} Á
cD:\GitHub-Projects\Recyclable-Scroll-Rect\Assets\Recyclable Scroll Rect\Main\Scripts\UIExtension.cs
public

 
static

 
class

 
UIExtension

 
{ 
public 

static 
float 
MaxY 
( 
this !
RectTransform" /
rectTransform0 =
)= >
{ 
Vector3 
[ 
] 
corners 
= 
new 
Vector3  '
[' (
$num( )
]) *
;* +
rectTransform 
. 
GetWorldCorners %
(% &
corners& -
)- .
;. /
return 
corners 
[ 
$num 
] 
. 
y 
; 
} 
public 

static 
float 
MinY 
( 
this !
RectTransform" /
rectTransform0 =
)= >
{ 
Vector3 
[ 
] 
corners 
= 
new 
Vector3  '
[' (
$num( )
]) *
;* +
rectTransform 
. 
GetWorldCorners %
(% &
corners& -
)- .
;. /
return 
corners 
[ 
$num 
] 
. 
y 
; 
} 
public 

static 
float 
MaxX 
( 
this !
RectTransform" /
rectTransform0 =
)= >
{ 
Vector3 
[ 
] 
corners 
= 
new 
Vector3  '
[' (
$num( )
]) *
;* +
rectTransform 
. 
GetWorldCorners %
(% &
corners& -
)- .
;. /
return 
corners 
[ 
$num 
] 
. 
x 
; 
} 
public!! 

static!! 
float!! 
MinX!! 
(!! 
this!! !
RectTransform!!" /
rectTransform!!0 =
)!!= >
{"" 
Vector3## 
[## 
]## 
corners## 
=## 
new## 
Vector3##  '
[##' (
$num##( )
]##) *
;##* +
rectTransform$$ 
.$$ 
GetWorldCorners$$ %
($$% &
corners$$& -
)$$- .
;$$. /
return%% 
corners%% 
[%% 
$num%% 
]%% 
.%% 
x%% 
;%% 
}&& 
}(( õÄ
oD:\GitHub-Projects\Recyclable-Scroll-Rect\Assets\Recyclable Scroll Rect\Main\Scripts\VerticalRecyclingSystem.cs
	namespace 	
PolyAndCode
 
. 
UI 
{ 
public		 
class		 #
VerticalRecyclingSystem		 %
:		& '
RecyclingSystem		( 7
{

 
private 
int 
	_coloumns 
= 
$num  !
;! "
private 
float 

_cellWidth  
,  !
_cellHeight" -
;- .
private 
int 
_topMostCellColoumn '
,' ("
_bottomMostCellColoumn) ?
,? @
_currentColoumnA P
;P Q
private 
bool !
_contentSizeIncreased *
;* +
private +
IRecyclableScrollRectDataSource /
_dataSource0 ;
;; <
public 
bool 
SelfInitialize "
=# $
true% )
;) *
private 
List 
< 
RectTransform "
>" #
	_cellPool$ -
;- .
private 
List 
< 
ICell 
> 
_cachedCells (
;( )
private 
RectTransform 
_listContainer ,
;, -
private 
Bounds !
_recyclableViewBounds ,
;, -
private 
float 
_recyclingThreshold )
=* +
$num, /
;/ 0
private 
Vector3 
[ 
] 
_corners "
=# $
new% (
Vector3) 0
[0 1
$num1 2
]2 3
;3 4
private   
bool   

_recycling   
;    
private## 
int## 
topMostCellIndex## $
,##$ %
bottomMostCellIndex##& 9
;##9 :
private$$ 
int$$ 
currentItemCount$$ $
;$$$ %
public&& #
VerticalRecyclingSystem&& &
(&&& '
RectTransform&&' 4
prototypeCell&&5 B
,&&B C
RectTransform&&D Q
viewport&&R Z
,&&Z [
RectTransform&&\ i
content&&j q
,&&q r,
IRecyclableScrollRectDataSource	&&s 

dataSource
&& 
,
&& 
bool
&& £
isGrid
&&¤ ª
,
&&ª «
int
&&« ®
coloumns
&&¯ ·
)
&&· ¸
{'' 	
PrototypeCell(( 
=(( 
prototypeCell(( )
;(() *
Viewport)) 
=)) 
viewport)) 
;))  
Content** 
=** 
content** 
;** 
_dataSource++ 
=++ 

dataSource++ $
;++$ %
IsGrid,, 
=,, 
isGrid,, 
;,, 
	_coloumns.. 
=.. 
isGrid.. 
?..  !
coloumns.." *
:..+ ,
$num..- .
;... /
}// 	
publicVV 
overrideVV 
IEnumeratorVV #
InitCoroutineVV$ 1
(VV1 2
SystemVV2 8
.VV8 9
ActionVV9 ?
onInitializedVV@ M
)VVM N
{WW 	
SetTopAnchorbb 
(bb 
Contentbb  
)bb  !
;bb! "
Contentcc 
.cc 
anchoredPositioncc $
=cc% &
Vector3cc' .
.cc. /
zerocc/ 3
;cc3 4
yielddd 
returndd 
nulldd 
;dd 
SetRecyclingBoundsee 
(ee 
)ee  
;ee  !
CreateCellPoolhh 
(hh 
)hh 
;hh 
topMostCellIndexjj 
=jj 
$numjj  
;jj  !
bottomMostCellIndexkk 
=kk  !
	_cellPoolkk" +
.kk+ ,
Countkk, 1
-kk2 3
$numkk4 5
;kk5 6
intmm 
noOfRowsmm 
=mm 
(mm 
intmm 
)mm  
Mathfmm  %
.mm% &
Ceilmm& *
(mm* +
(mm+ ,
floatmm, 1
)mm1 2
	_cellPoolmm2 ;
.mm; <
Countmm< A
/mmB C
(mmD E
floatmmE J
)mmJ K
	_coloumnsmmK T
)mmT U
;mmU V
floatpp 
contentYSizepp 
=pp  
noOfRowspp" *
*pp+ ,
PrototypeCellpp- :
.pp: ;
	sizeDeltapp; D
.ppD E
yppE F
;ppF G
Contentqq 
.qq 
	sizeDeltaqq 
=qq 
newqq  #
Vector2qq$ +
(qq+ ,
Contentqq, 3
.qq3 4
	sizeDeltaqq4 =
.qq= >
xqq> ?
,qq? @
contentYSizeqqA M
)qqM N
;qqN O
currentItemCountrr 
=rr 
	_cellPoolrr (
.rr( )
Countrr) .
;rr. /
SetTopAnchorss 
(ss 
Contentss  
)ss  !
;ss! "
ifuu 
(uu 
onInitializeduu 
!=uu 
nulluu  $
)uu$ %
onInitializeduu& 3
(uu3 4
)uu4 5
;uu5 6
}xx 	
private}} 
void}} 
SetRecyclingBounds}} '
(}}' (
)}}( )
{~~ 	
Viewport 
. 
GetWorldCorners $
($ %
_corners% -
)- .
;. /
float
 

threshHold
 
=
 !
_recyclingThreshold
 2
*
3 4
(
5 6
_corners
6 >
[
> ?
$num
? @
]
@ A
.
A B
y
B C
-
D E
_corners
F N
[
N O
$num
O P
]
P Q
.
Q R
y
R S
)
S T
;
T U#
_recyclableViewBounds
 !
.
! "
min
" %
=
& '
new
( +
Vector3
, 3
(
3 4
_corners
4 <
[
< =
$num
= >
]
> ?
.
? @
x
@ A
,
A B
_corners
C K
[
K L
$num
L M
]
M N
.
N O
y
O P
-
Q R

threshHold
S ]
)
] ^
;
^ _#
_recyclableViewBounds
 !
.
! "
max
" %
=
& '
new
( +
Vector3
, 3
(
3 4
_corners
4 <
[
< =
$num
= >
]
> ?
.
? @
x
@ A
,
A B
_corners
C K
[
K L
$num
L M
]
M N
.
N O
y
O P
+
Q R

threshHold
S ]
)
] ^
;
^ _
}
 	
private
 
void
 
CreateCellPool
 $
(
$ %
)
% &
{
 	
if
 
(
 
	_cellPool
 
!=
 
null
 !
)
! "
{
 
	_cellPool
 
.
 
ForEach
 !
(
! "
(
" #
RectTransform
# 0
item
1 5
)
5 6
=>
7 9
UnityEngine
: E
.
E F
Object
F L
.
L M
Destroy
M T
(
T U
item
U Y
.
Y Z

gameObject
Z d
)
d e
)
e f
;
f g
	_cellPool
 
.
 
Clear
 
(
  
)
  !
;
! "
_cachedCells
 
.
 
Clear
 "
(
" #
)
# $
;
$ %
}
 
else
 
{
 
_cachedCells
 
=
 
new
 "
List
# '
<
' (
ICell
( -
>
- .
(
. /
)
/ 0
;
0 1
	_cellPool
 
=
 
new
 
List
  $
<
$ %
RectTransform
% 2
>
2 3
(
3 4
)
4 5
;
5 6
}
 
PrototypeCell
 
.
 

gameObject
 $
.
$ %
	SetActive
% .
(
. /
true
/ 3
)
3 4
;
4 5
if
 
(
 
IsGrid
 
)
 
{
 
SetTopLeftAnchor
  
(
  !
PrototypeCell
! .
)
. /
;
/ 0
}
 
else
 
{
 
SetTopAnchor
 
(
 
PrototypeCell
 *
)
* +
;
+ ,
}
   
float
££ !
currentPoolCoverage
££ %
=
££& '
$num
££( )
;
££) *
int
¤¤ 
poolSize
¤¤ 
=
¤¤ 
$num
¤¤ 
;
¤¤ 
float
¦¦ 
posX
¦¦ 
=
¦¦ 
$num
¦¦ 
;
¦¦ 
float
§§ 
posY
§§ 
=
§§ 
$num
§§ 
;
§§ 

_cellWidth
©© 
=
©© 
Content
©©  
.
©©  !
rect
©©! %
.
©©% &
width
©©& +
/
©©, -
	_coloumns
©©. 7
;
©©7 8
_cellHeight
ªª 
=
ªª 
PrototypeCell
ªª '
.
ªª' (
	sizeDelta
ªª( 1
.
ªª1 2
y
ªª2 3
/
ªª4 5
PrototypeCell
ªª6 C
.
ªªC D
	sizeDelta
ªªD M
.
ªªM N
x
ªªN O
*
ªªP Q

_cellWidth
ªªR \
;
ªª\ ]
PrototypeCell
«« 
.
«« 
	sizeDelta
«« #
=
««$ %
new
««& )
Vector3
««* 1
(
««1 2

_cellWidth
««2 <
,
««< =
_cellHeight
««> I
)
««I J
;
««J K
_currentColoumn
¬¬ 
=
¬¬ !
_topMostCellColoumn
¬¬ 1
=
¬¬2 3
$num
¬¬4 5
;
¬¬5 6
float
²² 
requriedCoverage
²² "
=
²²# $
MinPoolCoverage
²²% 4
*
²²5 6
Viewport
²²7 ?
.
²²? @
rect
²²@ D
.
²²D E
height
²²E K
;
²²K L
int
´´ 
minPoolSize
´´ 
=
´´ 
Math
´´ "
.
´´" #
Min
´´# &
(
´´& '
MinPoolSize
´´' 2
,
´´2 3
_dataSource
´´4 ?
.
´´? @
GetItemCount
´´@ L
(
´´L M
)
´´M N
)
´´N O
;
´´O P
while
·· 
(
·· 
(
·· 
poolSize
·· 
<
·· 
$num
·· !
||
··" $!
currentPoolCoverage
··% 8
<
··9 :
requriedCoverage
··; K
)
··K L
&&
··M O
poolSize
··P X
<
··Y Z
_dataSource
··[ f
.
··f g
GetItemCount
··g s
(
··s t
)
··t u
)
··u v
{
¸¸ 
RectTransform
ºº 
item
ºº "
=
ºº# $
(
ºº% &
UnityEngine
ºº& 1
.
ºº1 2
Object
ºº2 8
.
ºº8 9
Instantiate
ºº9 D
(
ººD E
PrototypeCell
ººE R
.
ººR S

gameObject
ººS ]
)
ºº] ^
as
ºº_ a

GameObject
ººb l
)
ººl m
.
ººm n
GetComponent
ººn z
<
ººz {
RectTransformºº{ 
>ºº 
(ºº 
)ºº 
;ºº 
item
»» 
.
»» 
name
»» 
=
»» 
$str
»» "
;
»»" #
	_cellPool
¼¼ 
.
¼¼ 
Add
¼¼ 
(
¼¼ 
item
¼¼ "
)
¼¼" #
;
¼¼# $
item
½½ 
.
½½ 
	SetParent
½½ 
(
½½ 
Content
½½ &
,
½½& '
false
½½( -
)
½½- .
;
½½. /
if
¿¿ 
(
¿¿ 
IsGrid
¿¿ 
)
¿¿ 
{
ÀÀ 
item
ÁÁ 
.
ÁÁ 
anchoredPosition
ÁÁ )
=
ÁÁ* +
new
ÁÁ, /
Vector2
ÁÁ0 7
(
ÁÁ7 8
posX
ÁÁ8 <
,
ÁÁ< =
posY
ÁÁ> B
)
ÁÁB C
;
ÁÁC D
_currentColoumn
ÂÂ #
++
ÂÂ# %
;
ÂÂ% &
posX
ÃÃ 
=
ÃÃ 
_currentColoumn
ÃÃ *
>=
ÃÃ+ -
	_coloumns
ÃÃ. 7
?
ÃÃ8 9
$num
ÃÃ: ;
:
ÃÃ< =
posX
ÃÃ> B
+
ÃÃC D

_cellWidth
ÃÃE O
;
ÃÃO P
posY
ÄÄ 
=
ÄÄ 
_currentColoumn
ÄÄ *
>=
ÄÄ+ -
	_coloumns
ÄÄ. 7
?
ÄÄ8 9
posY
ÄÄ: >
-
ÄÄ? @
_cellHeight
ÄÄA L
:
ÄÄM N
posY
ÄÄO S
;
ÄÄS T
if
ÅÅ 
(
ÅÅ 
_currentColoumn
ÅÅ '
>=
ÅÅ( *
	_coloumns
ÅÅ+ 4
)
ÅÅ4 5
{
ÆÆ 
_currentColoumn
ÇÇ '
=
ÇÇ( )
$num
ÇÇ* +
;
ÇÇ+ ,!
currentPoolCoverage
ÈÈ +
+=
ÈÈ, .
item
ÈÈ/ 3
.
ÈÈ3 4
rect
ÈÈ4 8
.
ÈÈ8 9
height
ÈÈ9 ?
;
ÈÈ? @
}
ÉÉ 
}
ÊÊ 
else
ËË 
{
ËË 
item
ÍÍ 
.
ÍÍ 
anchoredPosition
ÍÍ )
=
ÍÍ* +
new
ÍÍ, /
Vector2
ÍÍ0 7
(
ÍÍ7 8
$num
ÍÍ8 9
,
ÍÍ9 :
posY
ÍÍ; ?
)
ÍÍ? @
;
ÍÍ@ A
posY
ÎÎ 
=
ÎÎ 
item
ÎÎ 
.
ÎÎ  
anchoredPosition
ÎÎ  0
.
ÎÎ0 1
y
ÎÎ1 2
-
ÎÎ3 4
item
ÎÎ5 9
.
ÎÎ9 :
rect
ÎÎ: >
.
ÎÎ> ?
height
ÎÎ? E
;
ÎÎE F!
currentPoolCoverage
ÏÏ '
+=
ÏÏ( *
item
ÏÏ+ /
.
ÏÏ/ 0
rect
ÏÏ0 4
.
ÏÏ4 5
height
ÏÏ5 ;
;
ÏÏ; <
}
ÐÐ 
_cachedCells
ÕÕ 
.
ÕÕ 
Add
ÕÕ  
(
ÕÕ  !
item
ÕÕ! %
.
ÕÕ% &
GetComponent
ÕÕ& 2
<
ÕÕ2 3
ICell
ÕÕ3 8
>
ÕÕ8 9
(
ÕÕ9 :
)
ÕÕ: ;
)
ÕÕ; <
;
ÕÕ< =
_dataSource
ÖÖ 
.
ÖÖ 
SetCell
ÖÖ #
(
ÖÖ# $
_cachedCells
ÖÖ$ 0
[
ÖÖ0 1
_cachedCells
ÖÖ1 =
.
ÖÖ= >
Count
ÖÖ> C
-
ÖÖD E
$num
ÖÖF G
]
ÖÖG H
,
ÖÖH I
poolSize
ÖÖJ R
)
ÖÖR S
;
ÖÖS T
poolSize
ÙÙ 
++
ÙÙ 
;
ÙÙ 
}
ÚÚ 
if
ÝÝ 
(
ÝÝ 
IsGrid
ÝÝ 
)
ÝÝ 
{
ÞÞ $
_bottomMostCellColoumn
ßß &
=
ßß' (
(
ßß) *
_currentColoumn
ßß* 9
-
ßß: ;
$num
ßß< =
+
ßß> ?
	_coloumns
ßß@ I
)
ßßI J
%
ßßK L
	_coloumns
ßßM V
;
ßßV W
}
àà 
if
ãã 
(
ãã 
PrototypeCell
ãã 
.
ãã 

gameObject
ãã (
.
ãã( )
scene
ãã) .
.
ãã. /
IsValid
ãã/ 6
(
ãã6 7
)
ãã7 8
)
ãã8 9
{
ää 
PrototypeCell
åå 
.
åå 

gameObject
åå (
.
åå( )
	SetActive
åå) 2
(
åå2 3
false
åå3 8
)
åå8 9
;
åå9 :
}
ææ 
}
çç 	
Vector2
êê 

zeroVector
êê 
=
êê 
Vector2
êê $
.
êê$ %
zero
êê% )
;
êê) *
public
ðð 
override
ðð 
Vector2
ðð $
OnValueChangedListener
ðð  6
(
ðð6 7
Vector2
ðð7 >
args
ðð? C
)
ððC D
{
ññ 	
if
òò 
(
òò 

_recycling
òò 
||
òò 
	_cellPool
òò '
==
òò( *
null
òò+ /
||
òò0 2
	_cellPool
òò3 <
.
òò< =
Count
òò= B
==
òòC E
$num
òòF G
)
òòG H
return
òòI O

zeroVector
òòP Z
;
òò[ \
foreach
ôô 
(
ôô 
var
ôô 
i
ôô 
in
ôô 
	_cellPool
ôô '
)
ôô' (
{
ôô) *
if
õõ 
(
õõ 
i
õõ 
==
õõ 
	_cellPool
õõ "
[
õõ" #
topMostCellIndex
õõ# 3
]
õõ3 4
)
õõ4 5
{
öö 
i
÷÷ 
.
÷÷ 
GetComponent
÷÷ "
<
÷÷" #
Image
÷÷# (
>
÷÷( )
(
÷÷) *
)
÷÷* +
.
÷÷+ ,
color
÷÷, 1
=
÷÷2 3
Color
÷÷4 9
.
÷÷9 :
red
÷÷: =
;
÷÷= >
}
øø 
else
ùù 
if
ùù 
(
ùù 
i
ùù 
==
ùù 
	_cellPool
ùù '
[
ùù' (!
bottomMostCellIndex
ùù( ;
]
ùù; <
)
ùù< =
{
úú 
i
ûû 
.
ûû 
GetComponent
ûû "
<
ûû" #
Image
ûû# (
>
ûû( )
(
ûû) *
)
ûû* +
.
ûû+ ,
color
ûû, 1
=
ûû2 3
Color
ûû4 9
.
ûû9 :
green
ûû: ?
;
ûû? @
}
üü 
else
ýý 
{
ýý 
i
þþ 
.
þþ 
GetComponent
þþ "
<
þþ" #
Image
þþ# (
>
þþ( )
(
þþ) *
)
þþ* +
.
þþ+ ,
color
þþ, 1
=
þþ2 3
Color
þþ4 9
.
þþ9 :
white
þþ: ?
;
þþ? @
}
 
}
  
SetRecyclingBounds
 
(
 
)
  
;
  !
if
 
(
 
	_cellPool
 
[
 !
bottomMostCellIndex
 -
]
- .
.
. /
MinY
/ 3
(
3 4
)
4 5
>
6 7#
_recyclableViewBounds
8 M
.
M N
min
N Q
.
Q R
y
R S
)
S T
{
 
return
  
RecycleTopToBottom
 *
(
* +
)
+ ,
;
, -
}
 
else
 
if
 
(
 
	_cellPool
 
[
 
topMostCellIndex
 /
]
/ 0
.
0 1
MaxY
1 5
(
5 6
)
6 7
<
8 9#
_recyclableViewBounds
: O
.
O P
max
P S
.
S T
y
T U
)
U V
{
 
Debug
 
.
 
Log
 
(
 
$str
 )
)
) *
;
* +
Debug
 
.
 
Log
 
(
 
$str
 !
+
" #
topMostCellIndex
$ 4
)
4 5
;
5 6
Debug
 
.
 
Log
 
(
 
$str
 "
+
# $
	_cellPool
% .
[
. /
topMostCellIndex
/ ?
]
? @
.
@ A
MaxY
A E
(
E F
)
F G
)
G H
;
H I
Debug
 
.
 
Log
 
(
 
$str
  
+
! "#
_recyclableViewBounds
# 8
.
8 9
max
9 <
.
< =
y
= >
)
> ?
;
? @
return
  
RecycleBottomToTop
 )
(
) *
)
* +
;
+ ,
}
 
return
 

zeroVector
 
;
 
}
 	
private
¢¢ 
Vector2
¢¢  
RecycleTopToBottom
¢¢ *
(
¢¢* +
)
¢¢+ ,
{
££ 	

_recycling
¤¤ 
=
¤¤ 
true
¤¤ 
;
¤¤ 
int
¦¦ 
n
¦¦ 
=
¦¦ 
$num
¦¦ 
;
¦¦ 
float
§§ 
posY
§§ 
=
§§ 
$num
§§ 
;
§§ 
float
¨¨ 
posX
¨¨ 
=
¨¨ 
$num
¨¨ 
;
¨¨ 
if
ªª 
(
ªª 
IsGrid
ªª 
)
ªª 
{
«« 
posY
¬¬ 
=
¬¬ 
	_cellPool
¬¬ !
[
¬¬! "!
bottomMostCellIndex
¬¬" 5
]
¬¬5 6
.
¬¬6 7
anchoredPosition
¬¬7 G
.
¬¬G H
y
¬¬H I
;
¬¬I J
if
®® 
(
®® $
_bottomMostCellColoumn
®® *
==
®®+ -
	_coloumns
®®. 7
-
®®8 9
$num
®®: ;
)
®®; <
{
¯¯ 
posY
°° 
-=
°° 
	_cellPool
°° %
[
°°% &
topMostCellIndex
°°& 6
]
°°6 7
.
°°7 8
rect
°°8 <
.
°°< =
height
°°= C
;
°°C D
}
±± 
_currentColoumn
²² 
=
²²  !$
_bottomMostCellColoumn
²²" 8
;
²²8 9
}
³³ 
while
¶¶ 
(
¶¶ 
	_cellPool
¶¶ 
[
¶¶ 
topMostCellIndex
¶¶ -
]
¶¶- .
.
¶¶. /
MinY
¶¶/ 3
(
¶¶3 4
)
¶¶4 5
>
¶¶6 7#
_recyclableViewBounds
¶¶8 M
.
¶¶M N
max
¶¶N Q
.
¶¶Q R
y
¶¶R S
&&
¶¶T V
currentItemCount
¶¶W g
<
¶¶h i
_dataSource
¶¶j u
.
¶¶u v
GetItemCount¶¶v 
(¶¶ 
)¶¶ 
)¶¶ 
{
·· 
if
¸¸ 
(
¸¸ 
IsGrid
¸¸ 
)
¸¸ 
{
¹¹ 
_currentColoumn
ºº #
++
ºº$ &
;
ºº& '
if
¼¼ 
(
¼¼ 
_currentColoumn
¼¼ '
>=
¼¼( *
	_coloumns
¼¼+ 4
)
¼¼4 5
{
½½ 
n
¾¾ 
++
¾¾ 
;
¾¾ 
_currentColoumn
¿¿ '
=
¿¿( )
$num
¿¿* +
;
¿¿+ ,
}
ÀÀ 
posX
ÁÁ 
=
ÁÁ 
_currentColoumn
ÁÁ *
*
ÁÁ+ ,

_cellWidth
ÁÁ- 7
;
ÁÁ7 8
if
ÃÃ 
(
ÃÃ 
_currentColoumn
ÃÃ '
==
ÃÃ( *
$num
ÃÃ+ ,
)
ÃÃ, -
{
ÄÄ 
posY
ÆÆ 
=
ÆÆ 
	_cellPool
ÆÆ (
[
ÆÆ( )!
bottomMostCellIndex
ÆÆ) <
]
ÆÆ< =
.
ÆÆ= >
anchoredPosition
ÆÆ> N
.
ÆÆN O
y
ÆÆO P
-
ÆÆQ R
_cellHeight
ÆÆS ^
;
ÆÆ^ _
}
ÇÇ 
	_cellPool
ÊÊ 
[
ÊÊ 
topMostCellIndex
ÊÊ .
]
ÊÊ. /
.
ÊÊ/ 0
anchoredPosition
ÊÊ0 @
=
ÊÊA B
new
ÊÊC F
Vector2
ÊÊG N
(
ÊÊN O
posX
ÊÊO S
,
ÊÊS T
posY
ÊÊU Y
)
ÊÊY Z
;
ÊÊZ [!
_topMostCellColoumn
ËË '
=
ËË( )
(
ËË* +!
_topMostCellColoumn
ËË+ >
+
ËË? @
$num
ËËA B
)
ËËB C
%
ËËD E
	_coloumns
ËËF O
;
ËËO P
}
ÍÍ 
else
ÎÎ 
{
ÎÎ 
posY
ÐÐ 
=
ÐÐ 
	_cellPool
ÐÐ $
[
ÐÐ$ %!
bottomMostCellIndex
ÐÐ% 8
]
ÐÐ8 9
.
ÐÐ9 :
anchoredPosition
ÐÐ: J
.
ÐÐJ K
y
ÐÐK L
-
ÐÐM N
	_cellPool
ÐÐO X
[
ÐÐX Y!
bottomMostCellIndex
ÐÐY l
]
ÐÐl m
.
ÐÐm n
	sizeDelta
ÐÐn w
.
ÐÐw x
y
ÐÐx y
;
ÐÐy z
	_cellPool
ÑÑ 
[
ÑÑ 
topMostCellIndex
ÑÑ .
]
ÑÑ. /
.
ÑÑ/ 0
anchoredPosition
ÑÑ0 @
=
ÑÑA B
new
ÑÑC F
Vector2
ÑÑG N
(
ÑÑN O
	_cellPool
ÑÑO X
[
ÑÑX Y
topMostCellIndex
ÑÑY i
]
ÑÑi j
.
ÑÑj k
anchoredPosition
ÑÑk {
.
ÑÑ{ |
x
ÑÑ| }
,
ÑÑ} ~
posYÑÑ 
)ÑÑ 
;ÑÑ 
}
ÒÒ 
_dataSource
ÕÕ 
.
ÕÕ 
SetCell
ÕÕ #
(
ÕÕ# $
_cachedCells
ÕÕ$ 0
[
ÕÕ0 1
topMostCellIndex
ÕÕ1 A
]
ÕÕA B
,
ÕÕB C
currentItemCount
ÕÕD T
)
ÕÕT U
;
ÕÕU V!
bottomMostCellIndex
ØØ #
=
ØØ$ %
topMostCellIndex
ØØ& 6
;
ØØ6 7
topMostCellIndex
ÙÙ  
=
ÙÙ! "
(
ÙÙ# $
topMostCellIndex
ÙÙ$ 4
+
ÙÙ5 6
$num
ÙÙ7 8
)
ÙÙ8 9
%
ÙÙ: ;
	_cellPool
ÙÙ< E
.
ÙÙE F
Count
ÙÙF K
;
ÙÙK L
currentItemCount
ÛÛ  
++
ÛÛ  "
;
ÛÛ" #
if
ÜÜ 
(
ÜÜ 
!
ÜÜ 
IsGrid
ÜÜ 
)
ÜÜ 
n
ÜÜ 
++
ÜÜ  
;
ÜÜ  !
}
ÝÝ 
if
àà 
(
àà 
IsGrid
àà 
)
àà 
{
áá $
_bottomMostCellColoumn
ââ &
=
ââ' (
_currentColoumn
ââ) 8
;
ââ8 9
if
åå 
(
åå 
!
åå #
_contentSizeIncreased
åå *
)
åå* +
{
ææ 
if
èè 
(
èè 
_currentColoumn
èè '
!=
èè( *
	_coloumns
èè+ 4
-
èè5 6
$num
èè7 8
)
èè8 9
{
éé 
Content
ëë 
.
ëë  
	sizeDelta
ëë  )
+=
ëë* ,
Vector2
ëë- 4
.
ëë4 5
up
ëë5 7
*
ëë8 9
	_cellPool
ëë: C
[
ëëC D
topMostCellIndex
ëëD T
]
ëëT U
.
ëëU V
	sizeDelta
ëëV _
.
ëë_ `
y
ëë` a
;
ëëa b
n
ìì 
-=
ìì 
$num
ìì 
;
ìì #
_contentSizeIncreased
íí -
=
íí. /
true
íí0 4
;
íí4 5
}
îî 
}
ïï 
else
ðð 
{
ññ 
if
óó 
(
óó 
_currentColoumn
óó '
==
óó( *
	_coloumns
óó+ 4
-
óó5 6
$num
óó7 8
)
óó8 9
{
ôô 
Content
õõ 
.
õõ  
	sizeDelta
õõ  )
-=
õõ* ,
Vector2
õõ- 4
.
õõ4 5
up
õõ5 7
*
õõ8 9
	_cellPool
õõ: C
[
õõC D
topMostCellIndex
õõD T
]
õõT U
.
õõU V
	sizeDelta
õõV _
.
õõ_ `
y
õõ` a
;
õõa b#
_contentSizeIncreased
öö -
=
öö. /
false
öö0 5
;
öö5 6
}
÷÷ 
}
øø 
}
úú 
	_cellPool
ÿÿ 
.
ÿÿ 
ForEach
ÿÿ 
(
ÿÿ 
(
ÿÿ 
RectTransform
ÿÿ ,
cell
ÿÿ- 1
)
ÿÿ1 2
=>
ÿÿ3 5
cell
ÿÿ6 :
.
ÿÿ: ;
anchoredPosition
ÿÿ; K
+=
ÿÿL N
n
ÿÿO P
*
ÿÿQ R
Vector2
ÿÿS Z
.
ÿÿZ [
up
ÿÿ[ ]
*
ÿÿ^ _
	_cellPool
ÿÿ` i
[
ÿÿi j
topMostCellIndex
ÿÿj z
]
ÿÿz {
.
ÿÿ{ |
	sizeDeltaÿÿ| 
.ÿÿ 
yÿÿ 
)ÿÿ 
;ÿÿ 
Content
 
.
 
anchoredPosition
 $
-=
% '
n
( )
*
* +
Vector2
, 3
.
3 4
up
4 6
*
7 8
	_cellPool
9 B
[
B C
topMostCellIndex
C S
]
S T
.
T U
	sizeDelta
U ^
.
^ _
y
_ `
;
` a

_recycling
 
=
 
false
 
;
 
return
 
-
 
new
 
Vector2
  
(
  !
$num
! "
,
" #
n
$ %
*
& '
	_cellPool
( 1
[
1 2
topMostCellIndex
2 B
]
B C
.
C D
	sizeDelta
D M
.
M N
y
N O
)
O P
;
P Q
}
 	
private
 
Vector2
  
RecycleBottomToTop
 *
(
* +
)
+ ,
{
 	
Debug
 
.
 
Log
 
(
 
$str
 %
+
& '
topMostCellIndex
( 8
)
8 9
;
9 :

_recycling
 
=
 
true
 
;
 
int
 
n
 
=
 
$num
 
;
 
float
 
posY
 
=
 
$num
 
;
 
float
 
posX
 
=
 
$num
 
;
 
if
 
(
 
IsGrid
 
)
 
{
 
float
 
_posY
 
=
 
	_cellPool
 '
[
' (
topMostCellIndex
( 8
]
8 9
.
9 :
anchoredPosition
: J
.
J K
y
K L
;
L M
if
 
(
 !
_topMostCellColoumn
 '
==
( *
$num
+ ,
)
, -
{
 
posY
 
+=
 
	_cellPool
 %
[
% &
topMostCellIndex
& 6
]
6 7
.
7 8
rect
8 <
.
< =
height
= C
;
C D
}
 
_currentColoumn
  
=
! "!
_topMostCellColoumn
# 6
;
6 7
}
   
while
¤¤ 
(
¤¤ 
	_cellPool
¤¤ 
[
¤¤ !
bottomMostCellIndex
¤¤ 0
]
¤¤0 1
.
¤¤1 2
MaxY
¤¤2 6
(
¤¤6 7
)
¤¤7 8
<
¤¤9 :#
_recyclableViewBounds
¤¤; P
.
¤¤P Q
min
¤¤Q T
.
¤¤T U
y
¤¤U V
&&
¤¤W Y
currentItemCount
¤¤Z j
>
¤¤k l
	_cellPool
¤¤m v
.
¤¤v w
Count
¤¤w |
)
¤¤| }
{
¥¥ 
if
§§ 
(
§§ 
IsGrid
§§ 
)
§§ 
{
¨¨ 
_currentColoumn
©© #
-=
©©$ &
$num
©©' (
;
©©( )
if
«« 
(
«« 
_currentColoumn
«« '
<
««( )
$num
««* +
)
««+ ,
{
¬¬ 
n
­­ 
++
­­ 
;
­­ 
_currentColoumn
®® '
=
®®( )
	_coloumns
®®* 3
-
®®4 5
$num
®®6 7
;
®®7 8
}
¯¯ 
posX
±± 
=
±± 
_currentColoumn
±± *
*
±±+ ,

_cellWidth
±±- 7
;
±±7 8
if
³³ 
(
³³ 
_currentColoumn
³³ '
==
³³( *
	_coloumns
³³+ 4
-
³³5 6
$num
³³7 8
)
³³8 9
{
´´ 
posY
¶¶ 
=
¶¶ 
	_cellPool
¶¶ (
[
¶¶( )
topMostCellIndex
¶¶) 9
]
¶¶9 :
.
¶¶: ;
anchoredPosition
¶¶; K
.
¶¶K L
y
¶¶L M
+
¶¶N O
_cellHeight
¶¶P [
;
¶¶[ \
}
·· 
	_cellPool
¸¸ 
[
¸¸ !
bottomMostCellIndex
¸¸ 1
]
¸¸1 2
.
¸¸2 3
anchoredPosition
¸¸3 C
=
¸¸D E
new
¸¸F I
Vector2
¸¸J Q
(
¸¸Q R
posX
¸¸R V
,
¸¸V W
posY
¸¸X \
)
¸¸\ ]
;
¸¸] ^$
_bottomMostCellColoumn
¹¹ *
=
¹¹+ ,
(
¹¹- .$
_bottomMostCellColoumn
¹¹. D
-
¹¹E F
$num
¹¹G H
+
¹¹I J
	_coloumns
¹¹K T
)
¹¹T U
%
¹¹V W
	_coloumns
¹¹X a
;
¹¹a b
}
»» 
else
¼¼ 
{
¼¼ 
posY
¾¾ 
=
¾¾ 
	_cellPool
¾¾  
[
¾¾  !
topMostCellIndex
¾¾! 1
]
¾¾1 2
.
¾¾2 3
anchoredPosition
¾¾3 C
.
¾¾C D
y
¾¾D E
+
¾¾F G
	_cellPool
¾¾H Q
[
¾¾Q R
topMostCellIndex
¾¾R b
]
¾¾b c
.
¾¾c d
	sizeDelta
¾¾d m
.
¾¾m n
y
¾¾n o
;
¾¾o p
	_cellPool
¿¿ 
[
¿¿ !
bottomMostCellIndex
¿¿ -
]
¿¿- .
.
¿¿. /
anchoredPosition
¿¿/ ?
=
¿¿@ A
new
¿¿B E
Vector2
¿¿F M
(
¿¿M N
	_cellPool
¿¿N W
[
¿¿W X!
bottomMostCellIndex
¿¿X k
]
¿¿k l
.
¿¿l m
anchoredPosition
¿¿m }
.
¿¿} ~
x
¿¿~ 
,¿¿ 
posY¿¿ 
)¿¿ 
;¿¿ 
n
ÁÁ 
++
ÁÁ 
;
ÁÁ 
}
ÃÃ 
currentItemCount
ÆÆ  
--
ÆÆ  "
;
ÆÆ" #
_dataSource
ÊÊ 
.
ÊÊ 
SetCell
ÊÊ #
(
ÊÊ# $
_cachedCells
ÊÊ$ 0
[
ÊÊ0 1!
bottomMostCellIndex
ÊÊ1 D
]
ÊÊD E
,
ÊÊE F
currentItemCount
ÊÊG W
-
ÊÊX Y
	_cellPool
ÊÊZ c
.
ÊÊc d
Count
ÊÊd i
)
ÊÊi j
;
ÊÊj k
topMostCellIndex
ÍÍ  
=
ÍÍ! "!
bottomMostCellIndex
ÍÍ# 6
;
ÍÍ6 7!
bottomMostCellIndex
ÎÎ #
=
ÎÎ$ %
(
ÎÎ& '!
bottomMostCellIndex
ÎÎ' :
-
ÎÎ; <
$num
ÎÎ= >
+
ÎÎ? @
	_cellPool
ÎÎA J
.
ÎÎJ K
Count
ÎÎK P
)
ÎÎP Q
%
ÎÎR S
	_cellPool
ÎÎT ]
.
ÎÎ] ^
Count
ÎÎ^ c
;
ÎÎc d
}
ÏÏ 
if
ÒÒ 
(
ÒÒ 
IsGrid
ÒÒ 
)
ÒÒ 
{
ÒÒ !
_topMostCellColoumn
ÓÓ #
=
ÓÓ$ %
_currentColoumn
ÓÓ& 5
;
ÓÓ5 6
if
ÖÖ 
(
ÖÖ 
!
ÖÖ #
_contentSizeIncreased
ÖÖ *
)
ÖÖ* +
{
×× 
if
ÙÙ 
(
ÙÙ 
_currentColoumn
ÙÙ '
!=
ÙÙ( *
$num
ÙÙ+ ,
)
ÙÙ, -
{
ÚÚ 
Content
ÜÜ 
.
ÜÜ  
	sizeDelta
ÜÜ  )
+=
ÜÜ* ,
Vector2
ÜÜ- 4
.
ÜÜ4 5
up
ÜÜ5 7
*
ÜÜ8 9
	_cellPool
ÜÜ: C
[
ÜÜC D
topMostCellIndex
ÜÜD T
]
ÜÜT U
.
ÜÜU V
	sizeDelta
ÜÜV _
.
ÜÜ_ `
y
ÜÜ` a
;
ÜÜa b
n
ÝÝ 
-=
ÝÝ 
$num
ÝÝ 
;
ÝÝ #
_contentSizeIncreased
ÞÞ -
=
ÞÞ. /
true
ÞÞ0 4
;
ÞÞ4 5
}
ßß 
}
àà 
else
áá 
{
ââ 
if
ää 
(
ää 
_currentColoumn
ää '
==
ää( *
$num
ää+ ,
)
ää, -
{
åå 
Content
ææ 
.
ææ  
	sizeDelta
ææ  )
-=
ææ* ,
Vector2
ææ- 4
.
ææ4 5
up
ææ5 7
*
ææ8 9
	_cellPool
ææ: C
[
ææC D
topMostCellIndex
ææD T
]
ææT U
.
ææU V
	sizeDelta
ææV _
.
ææ_ `
y
ææ` a
;
ææa b#
_contentSizeIncreased
çç -
=
çç. /
false
çç0 5
;
çç5 6
}
èè 
}
éé 
}
êê 
	_cellPool
ïï 
.
ïï 
ForEach
ïï 
(
ïï 
(
ïï 
RectTransform
ïï ,
cell
ïï- 1
)
ïï1 2
=>
ïï3 5
cell
ïï6 :
.
ïï: ;
anchoredPosition
ïï; K
-=
ïïL N
n
ïïO P
*
ïïQ R
Vector2
ïïS Z
.
ïïZ [
up
ïï[ ]
*
ïï^ _
	_cellPool
ïï` i
[
ïïi j
topMostCellIndex
ïïj z
]
ïïz {
.
ïï{ |
	sizeDeltaïï| 
.ïï 
yïï 
)ïï 
;ïï 
Content
ññ 
.
ññ 
anchoredPosition
ññ $
+=
ññ% '
n
ññ( )
*
ññ* +
Vector2
ññ, 3
.
ññ3 4
up
ññ4 6
*
ññ7 8
	_cellPool
ññ9 B
[
ññB C
topMostCellIndex
ññC S
]
ññS T
.
ññT U
	sizeDelta
ññU ^
.
ññ^ _
y
ññ_ `
;
ññ` a

_recycling
ôô 
=
ôô 
false
ôô 
;
ôô 
return
õõ 
new
õõ 
Vector2
õõ  
(
õõ  !
$num
õõ! "
,
õõ" #
n
õõ$ %
*
õõ& '
	_cellPool
õõ( 1
[
õõ1 2
topMostCellIndex
õõ2 B
]
õõB C
.
õõC D
	sizeDelta
õõD M
.
õõM N
y
õõN O
)
õõO P
;
õõP Q
}
öö 	
private
þþ 
void
þþ 
SetTopAnchor
þþ !
(
þþ! "
RectTransform
þþ" /
rectTransform
þþ0 =
)
þþ= >
{
ÿÿ 	
float
 
width
 
=
 
rectTransform
 '
.
' (
rect
( ,
.
, -
width
- 2
;
2 3
float
 
height
 
=
 
rectTransform
 (
.
( )
rect
) -
.
- .
height
. 4
;
4 5
rectTransform
 
.
 
	anchorMin
 #
=
$ %
new
& )
Vector2
* 1
(
1 2
$num
2 6
,
6 7
$num
8 9
)
9 :
;
: ;
rectTransform
 
.
 
	anchorMax
 #
=
$ %
new
& )
Vector2
* 1
(
1 2
$num
2 6
,
6 7
$num
8 9
)
9 :
;
: ;
rectTransform
 
.
 
pivot
 
=
  !
new
" %
Vector2
& -
(
- .
$num
. 2
,
2 3
$num
4 5
)
5 6
;
6 7
rectTransform
 
.
 
	sizeDelta
 #
=
$ %
new
& )
Vector2
* 1
(
1 2
width
2 7
,
7 8
height
9 ?
)
? @
;
@ A
}
 	
private
 
void
 
SetTopLeftAnchor
 %
(
% &
RectTransform
& 3
rectTransform
4 A
)
A B
{
 	
float
 
width
 
=
 
rectTransform
 '
.
' (
rect
( ,
.
, -
width
- 2
;
2 3
float
 
height
 
=
 
rectTransform
 (
.
( )
rect
) -
.
- .
height
. 4
;
4 5
rectTransform
 
.
 
	anchorMin
 #
=
$ %
new
& )
Vector2
* 1
(
1 2
$num
2 3
,
3 4
$num
5 6
)
6 7
;
7 8
rectTransform
 
.
 
	anchorMax
 #
=
$ %
new
& )
Vector2
* 1
(
1 2
$num
2 3
,
3 4
$num
5 6
)
6 7
;
7 8
rectTransform
 
.
 
pivot
 
=
  !
new
" %
Vector2
& -
(
- .
$num
. /
,
/ 0
$num
1 2
)
2 3
;
3 4
rectTransform
 
.
 
	sizeDelta
 #
=
$ %
new
& )
Vector2
* 1
(
1 2
width
2 7
,
7 8
height
9 ?
)
? @
;
@ A
}
 	
public
 
void
 
OnDrawGizmos
  
(
  !
)
! "
{
 	
Gizmos
   
.
   
color
   
=
   
Color
    
.
    !
green
  ! &
;
  & '
Gizmos
¡¡ 
.
¡¡ 
DrawLine
¡¡ 
(
¡¡ #
_recyclableViewBounds
¡¡ 1
.
¡¡1 2
min
¡¡2 5
-
¡¡6 7
new
¡¡8 ;
Vector3
¡¡< C
(
¡¡C D
$num
¡¡D H
,
¡¡H I
$num
¡¡J K
)
¡¡K L
,
¡¡L M#
_recyclableViewBounds
¡¡N c
.
¡¡c d
min
¡¡d g
+
¡¡h i
new
¡¡j m
Vector3
¡¡n u
(
¡¡u v
$num
¡¡v z
,
¡¡z {
$num
¡¡| }
)
¡¡} ~
)
¡¡~ 
;¡¡ 
Gizmos
¢¢ 
.
¢¢ 
color
¢¢ 
=
¢¢ 
Color
¢¢  
.
¢¢  !
red
¢¢! $
;
¢¢$ %
Gizmos
££ 
.
££ 
DrawLine
££ 
(
££ #
_recyclableViewBounds
££ 1
.
££1 2
max
££2 5
-
££6 7
new
££8 ;
Vector3
££< C
(
££C D
$num
££D H
,
££H I
$num
££J K
)
££K L
,
££L M#
_recyclableViewBounds
££N c
.
££c d
max
££d g
+
££h i
new
££j m
Vector3
££n u
(
££u v
$num
££v z
,
££z {
$num
££| }
)
££} ~
)
££~ 
;££ 
}
¤¤ 	
}
¦¦ 
}§§ 